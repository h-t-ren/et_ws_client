/* soapC.cpp
   Generated by gSOAP 2.8.3 from et.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.3 2012-01-11 14:20:50 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_xsd__date:
		return soap_in_xsd__date(soap, NULL, NULL, "xsd:date");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__marketResponse:
		return soap_in_PointerTo_ns1__marketResponse(soap, NULL, NULL, "ns1:marketResponse");
	case SOAP_TYPE_PointerTo_ns1__marketRequest:
		return soap_in_PointerTo_ns1__marketRequest(soap, NULL, NULL, "ns1:marketRequest");
	case SOAP_TYPE_PointerTo_ns1__saveSolutionRequest:
		return soap_in_PointerTo_ns1__saveSolutionRequest(soap, NULL, NULL, "ns1:saveSolutionRequest");
	case SOAP_TYPE_PointerTo_ns1__saveAgentResponse:
		return soap_in_PointerTo_ns1__saveAgentResponse(soap, NULL, NULL, "ns1:saveAgentResponse");
	case SOAP_TYPE_PointerTo_ns1__saveAgentRequest:
		return soap_in_PointerTo_ns1__saveAgentRequest(soap, NULL, NULL, "ns1:saveAgentRequest");
	case SOAP_TYPE_PointerTo_ns1__saveBidResponse:
		return soap_in_PointerTo_ns1__saveBidResponse(soap, NULL, NULL, "ns1:saveBidResponse");
	case SOAP_TYPE_PointerTo_ns1__saveBidRequest:
		return soap_in_PointerTo_ns1__saveBidRequest(soap, NULL, NULL, "ns1:saveBidRequest");
	case SOAP_TYPE_PointerTo_ns1__saveAuctionResponse:
		return soap_in_PointerTo_ns1__saveAuctionResponse(soap, NULL, NULL, "ns1:saveAuctionResponse");
	case SOAP_TYPE_PointerTo_ns1__saveAuctionRequest:
		return soap_in_PointerTo_ns1__saveAuctionRequest(soap, NULL, NULL, "ns1:saveAuctionRequest");
	case SOAP_TYPE_PointerTo_ns1__solution:
		return soap_in_PointerTo_ns1__solution(soap, NULL, NULL, "ns1:solution");
	case SOAP_TYPE_PointerTo_ns1__msg:
		return soap_in_PointerTo_ns1__msg(soap, NULL, NULL, "ns1:msg");
	case SOAP_TYPE_PointerTo_ns1__partySolution:
		return soap_in_PointerTo_ns1__partySolution(soap, NULL, NULL, "ns1:partySolution");
	case SOAP_TYPE_PointerTo_ns1__marketSolution:
		return soap_in_PointerTo_ns1__marketSolution(soap, NULL, NULL, "ns1:marketSolution");
	case SOAP_TYPE_PointerTo_ns1__bid:
		return soap_in_PointerTo_ns1__bid(soap, NULL, NULL, "ns1:bid");
	case SOAP_TYPE_PointerTo_ns1__auction:
		return soap_in_PointerTo_ns1__auction(soap, NULL, NULL, "ns1:auction");
	case SOAP_TYPE_PointerTo_ns1__agent:
		return soap_in_PointerTo_ns1__agent(soap, NULL, NULL, "ns1:agent");
	case SOAP_TYPE_PointerTo_ns1__point:
		return soap_in_PointerTo_ns1__point(soap, NULL, NULL, "ns1:point");
	case SOAP_TYPE_PointerTo_ns1__func:
		return soap_in_PointerTo_ns1__func(soap, NULL, NULL, "ns1:func");
	case SOAP_TYPE_PointerTo_ns1__party:
		return soap_in_PointerTo_ns1__party(soap, NULL, NULL, "ns1:party");
	case SOAP_TYPE_PointerTo_ns1__market:
		return soap_in_PointerTo_ns1__market(soap, NULL, NULL, "ns1:market");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:date"))
		{	*type = SOAP_TYPE_xsd__date;
			return soap_in_xsd__date(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:saveSolutionRequest"))
		{	*type = SOAP_TYPE__ns1__saveSolutionRequest;
			return soap_in__ns1__saveSolutionRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:msg"))
		{	*type = SOAP_TYPE__ns1__msg;
			return soap_in__ns1__msg(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:marketSolution"))
		{	*type = SOAP_TYPE__ns1__marketSolution;
			return soap_in__ns1__marketSolution(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:partySolution"))
		{	*type = SOAP_TYPE__ns1__partySolution;
			return soap_in__ns1__partySolution(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:solution"))
		{	*type = SOAP_TYPE__ns1__solution;
			return soap_in__ns1__solution(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:bid"))
		{	*type = SOAP_TYPE__ns1__bid;
			return soap_in__ns1__bid(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:saveBidResponse"))
		{	*type = SOAP_TYPE__ns1__saveBidResponse;
			return soap_in__ns1__saveBidResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:saveBidRequest"))
		{	*type = SOAP_TYPE__ns1__saveBidRequest;
			return soap_in__ns1__saveBidRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:auction"))
		{	*type = SOAP_TYPE__ns1__auction;
			return soap_in__ns1__auction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:saveAuctionResponse"))
		{	*type = SOAP_TYPE__ns1__saveAuctionResponse;
			return soap_in__ns1__saveAuctionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:saveAuctionRequest"))
		{	*type = SOAP_TYPE__ns1__saveAuctionRequest;
			return soap_in__ns1__saveAuctionRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:agent"))
		{	*type = SOAP_TYPE__ns1__agent;
			return soap_in__ns1__agent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:saveAgentResponse"))
		{	*type = SOAP_TYPE__ns1__saveAgentResponse;
			return soap_in__ns1__saveAgentResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:saveAgentRequest"))
		{	*type = SOAP_TYPE__ns1__saveAgentRequest;
			return soap_in__ns1__saveAgentRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:point"))
		{	*type = SOAP_TYPE__ns1__point;
			return soap_in__ns1__point(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:func"))
		{	*type = SOAP_TYPE__ns1__func;
			return soap_in__ns1__func(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:party"))
		{	*type = SOAP_TYPE__ns1__party;
			return soap_in__ns1__party(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:market"))
		{	*type = SOAP_TYPE__ns1__market;
			return soap_in__ns1__market(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:marketResponse"))
		{	*type = SOAP_TYPE__ns1__marketResponse;
			return soap_in__ns1__marketResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:marketRequest"))
		{	*type = SOAP_TYPE__ns1__marketRequest;
			return soap_in__ns1__marketRequest(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE__ns1__saveSolutionRequest:
		return ((_ns1__saveSolutionRequest *)ptr)->soap_out(soap, "ns1:saveSolutionRequest", id, NULL);
	case SOAP_TYPE__ns1__msg:
		return ((_ns1__msg *)ptr)->soap_out(soap, "ns1:msg", id, NULL);
	case SOAP_TYPE__ns1__marketSolution:
		return ((_ns1__marketSolution *)ptr)->soap_out(soap, "ns1:marketSolution", id, NULL);
	case SOAP_TYPE__ns1__partySolution:
		return ((_ns1__partySolution *)ptr)->soap_out(soap, "ns1:partySolution", id, NULL);
	case SOAP_TYPE__ns1__solution:
		return ((_ns1__solution *)ptr)->soap_out(soap, "ns1:solution", id, NULL);
	case SOAP_TYPE__ns1__bid:
		return ((_ns1__bid *)ptr)->soap_out(soap, "ns1:bid", id, NULL);
	case SOAP_TYPE__ns1__saveBidResponse:
		return ((_ns1__saveBidResponse *)ptr)->soap_out(soap, "ns1:saveBidResponse", id, NULL);
	case SOAP_TYPE__ns1__saveBidRequest:
		return ((_ns1__saveBidRequest *)ptr)->soap_out(soap, "ns1:saveBidRequest", id, NULL);
	case SOAP_TYPE__ns1__auction:
		return ((_ns1__auction *)ptr)->soap_out(soap, "ns1:auction", id, NULL);
	case SOAP_TYPE__ns1__saveAuctionResponse:
		return ((_ns1__saveAuctionResponse *)ptr)->soap_out(soap, "ns1:saveAuctionResponse", id, NULL);
	case SOAP_TYPE__ns1__saveAuctionRequest:
		return ((_ns1__saveAuctionRequest *)ptr)->soap_out(soap, "ns1:saveAuctionRequest", id, NULL);
	case SOAP_TYPE__ns1__agent:
		return ((_ns1__agent *)ptr)->soap_out(soap, "ns1:agent", id, NULL);
	case SOAP_TYPE__ns1__saveAgentResponse:
		return ((_ns1__saveAgentResponse *)ptr)->soap_out(soap, "ns1:saveAgentResponse", id, NULL);
	case SOAP_TYPE__ns1__saveAgentRequest:
		return ((_ns1__saveAgentRequest *)ptr)->soap_out(soap, "ns1:saveAgentRequest", id, NULL);
	case SOAP_TYPE__ns1__point:
		return ((_ns1__point *)ptr)->soap_out(soap, "ns1:point", id, NULL);
	case SOAP_TYPE__ns1__func:
		return ((_ns1__func *)ptr)->soap_out(soap, "ns1:func", id, NULL);
	case SOAP_TYPE__ns1__party:
		return ((_ns1__party *)ptr)->soap_out(soap, "ns1:party", id, NULL);
	case SOAP_TYPE__ns1__market:
		return ((_ns1__market *)ptr)->soap_out(soap, "ns1:market", id, NULL);
	case SOAP_TYPE__ns1__marketResponse:
		return ((_ns1__marketResponse *)ptr)->soap_out(soap, "ns1:marketResponse", id, NULL);
	case SOAP_TYPE__ns1__marketRequest:
		return ((_ns1__marketRequest *)ptr)->soap_out(soap, "ns1:marketRequest", id, NULL);
	case SOAP_TYPE_xsd__date:
		return soap_out_xsd__date(soap, tag, id, (const std::string *)ptr, "xsd:date");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__marketResponse:
		return soap_out_PointerTo_ns1__marketResponse(soap, tag, id, (_ns1__marketResponse *const*)ptr, "ns1:marketResponse");
	case SOAP_TYPE_PointerTo_ns1__marketRequest:
		return soap_out_PointerTo_ns1__marketRequest(soap, tag, id, (_ns1__marketRequest *const*)ptr, "ns1:marketRequest");
	case SOAP_TYPE_PointerTo_ns1__saveSolutionRequest:
		return soap_out_PointerTo_ns1__saveSolutionRequest(soap, tag, id, (_ns1__saveSolutionRequest *const*)ptr, "ns1:saveSolutionRequest");
	case SOAP_TYPE_PointerTo_ns1__saveAgentResponse:
		return soap_out_PointerTo_ns1__saveAgentResponse(soap, tag, id, (_ns1__saveAgentResponse *const*)ptr, "ns1:saveAgentResponse");
	case SOAP_TYPE_PointerTo_ns1__saveAgentRequest:
		return soap_out_PointerTo_ns1__saveAgentRequest(soap, tag, id, (_ns1__saveAgentRequest *const*)ptr, "ns1:saveAgentRequest");
	case SOAP_TYPE_PointerTo_ns1__saveBidResponse:
		return soap_out_PointerTo_ns1__saveBidResponse(soap, tag, id, (_ns1__saveBidResponse *const*)ptr, "ns1:saveBidResponse");
	case SOAP_TYPE_PointerTo_ns1__saveBidRequest:
		return soap_out_PointerTo_ns1__saveBidRequest(soap, tag, id, (_ns1__saveBidRequest *const*)ptr, "ns1:saveBidRequest");
	case SOAP_TYPE_PointerTo_ns1__saveAuctionResponse:
		return soap_out_PointerTo_ns1__saveAuctionResponse(soap, tag, id, (_ns1__saveAuctionResponse *const*)ptr, "ns1:saveAuctionResponse");
	case SOAP_TYPE_PointerTo_ns1__saveAuctionRequest:
		return soap_out_PointerTo_ns1__saveAuctionRequest(soap, tag, id, (_ns1__saveAuctionRequest *const*)ptr, "ns1:saveAuctionRequest");
	case SOAP_TYPE_PointerTo_ns1__solution:
		return soap_out_PointerTo_ns1__solution(soap, tag, id, (_ns1__solution *const*)ptr, "ns1:solution");
	case SOAP_TYPE_PointerTo_ns1__msg:
		return soap_out_PointerTo_ns1__msg(soap, tag, id, (_ns1__msg *const*)ptr, "ns1:msg");
	case SOAP_TYPE_PointerTo_ns1__partySolution:
		return soap_out_PointerTo_ns1__partySolution(soap, tag, id, (_ns1__partySolution *const*)ptr, "ns1:partySolution");
	case SOAP_TYPE_PointerTo_ns1__marketSolution:
		return soap_out_PointerTo_ns1__marketSolution(soap, tag, id, (_ns1__marketSolution *const*)ptr, "ns1:marketSolution");
	case SOAP_TYPE_PointerTo_ns1__bid:
		return soap_out_PointerTo_ns1__bid(soap, tag, id, (_ns1__bid *const*)ptr, "ns1:bid");
	case SOAP_TYPE_PointerTo_ns1__auction:
		return soap_out_PointerTo_ns1__auction(soap, tag, id, (_ns1__auction *const*)ptr, "ns1:auction");
	case SOAP_TYPE_PointerTo_ns1__agent:
		return soap_out_PointerTo_ns1__agent(soap, tag, id, (_ns1__agent *const*)ptr, "ns1:agent");
	case SOAP_TYPE_PointerTo_ns1__point:
		return soap_out_PointerTo_ns1__point(soap, tag, id, (_ns1__point *const*)ptr, "ns1:point");
	case SOAP_TYPE_PointerTo_ns1__func:
		return soap_out_PointerTo_ns1__func(soap, tag, id, (_ns1__func *const*)ptr, "ns1:func");
	case SOAP_TYPE_PointerTo_ns1__party:
		return soap_out_PointerTo_ns1__party(soap, tag, id, (_ns1__party *const*)ptr, "ns1:party");
	case SOAP_TYPE_PointerTo_ns1__market:
		return soap_out_PointerTo_ns1__market(soap, tag, id, (_ns1__market *const*)ptr, "ns1:market");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__saveSolutionRequest:
		((_ns1__saveSolutionRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__msg:
		((_ns1__msg *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__marketSolution:
		((_ns1__marketSolution *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__partySolution:
		((_ns1__partySolution *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__solution:
		((_ns1__solution *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__bid:
		((_ns1__bid *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__saveBidResponse:
		((_ns1__saveBidResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__saveBidRequest:
		((_ns1__saveBidRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__auction:
		((_ns1__auction *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__saveAuctionResponse:
		((_ns1__saveAuctionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__saveAuctionRequest:
		((_ns1__saveAuctionRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__agent:
		((_ns1__agent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__saveAgentResponse:
		((_ns1__saveAgentResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__saveAgentRequest:
		((_ns1__saveAgentRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__point:
		((_ns1__point *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__func:
		((_ns1__func *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__party:
		((_ns1__party *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__market:
		((_ns1__market *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__marketResponse:
		((_ns1__marketResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__marketRequest:
		((_ns1__marketRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__date:
		soap_serialize_xsd__date(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___ns1__market:
		soap_serialize___ns1__market(soap, (const struct __ns1__market *)ptr);
		break;
	case SOAP_TYPE___ns1__saveSolution:
		soap_serialize___ns1__saveSolution(soap, (const struct __ns1__saveSolution *)ptr);
		break;
	case SOAP_TYPE___ns1__saveSolutionResponse:
		soap_serialize___ns1__saveSolutionResponse(soap, (const struct __ns1__saveSolutionResponse *)ptr);
		break;
	case SOAP_TYPE___ns1__saveAgent:
		soap_serialize___ns1__saveAgent(soap, (const struct __ns1__saveAgent *)ptr);
		break;
	case SOAP_TYPE___ns1__saveBid:
		soap_serialize___ns1__saveBid(soap, (const struct __ns1__saveBid *)ptr);
		break;
	case SOAP_TYPE___ns1__saveAuction:
		soap_serialize___ns1__saveAuction(soap, (const struct __ns1__saveAuction *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__marketResponse:
		soap_serialize_PointerTo_ns1__marketResponse(soap, (_ns1__marketResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__marketRequest:
		soap_serialize_PointerTo_ns1__marketRequest(soap, (_ns1__marketRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__saveSolutionRequest:
		soap_serialize_PointerTo_ns1__saveSolutionRequest(soap, (_ns1__saveSolutionRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__saveAgentResponse:
		soap_serialize_PointerTo_ns1__saveAgentResponse(soap, (_ns1__saveAgentResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__saveAgentRequest:
		soap_serialize_PointerTo_ns1__saveAgentRequest(soap, (_ns1__saveAgentRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__saveBidResponse:
		soap_serialize_PointerTo_ns1__saveBidResponse(soap, (_ns1__saveBidResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__saveBidRequest:
		soap_serialize_PointerTo_ns1__saveBidRequest(soap, (_ns1__saveBidRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__saveAuctionResponse:
		soap_serialize_PointerTo_ns1__saveAuctionResponse(soap, (_ns1__saveAuctionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__saveAuctionRequest:
		soap_serialize_PointerTo_ns1__saveAuctionRequest(soap, (_ns1__saveAuctionRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__solution:
		soap_serialize_PointerTo_ns1__solution(soap, (_ns1__solution *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__msg:
		soap_serialize_PointerTo_ns1__msg(soap, (_ns1__msg *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__partySolution:
		soap_serialize_PointerTo_ns1__partySolution(soap, (_ns1__partySolution *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__marketSolution:
		soap_serialize_PointerTo_ns1__marketSolution(soap, (_ns1__marketSolution *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__bid:
		soap_serialize_PointerTo_ns1__bid(soap, (_ns1__bid *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__auction:
		soap_serialize_PointerTo_ns1__auction(soap, (_ns1__auction *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__agent:
		soap_serialize_PointerTo_ns1__agent(soap, (_ns1__agent *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__point:
		soap_serialize_PointerTo_ns1__point(soap, (_ns1__point *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__func:
		soap_serialize_PointerTo_ns1__func(soap, (_ns1__func *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__party:
		soap_serialize_PointerTo_ns1__party(soap, (_ns1__party *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__market:
		soap_serialize_PointerTo_ns1__market(soap, (_ns1__market *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__marketRequest:
		return (void*)soap_instantiate__ns1__marketRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__marketResponse:
		return (void*)soap_instantiate__ns1__marketResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__market:
		return (void*)soap_instantiate__ns1__market(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__party:
		return (void*)soap_instantiate__ns1__party(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__func:
		return (void*)soap_instantiate__ns1__func(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__point:
		return (void*)soap_instantiate__ns1__point(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__saveAgentRequest:
		return (void*)soap_instantiate__ns1__saveAgentRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__saveAgentResponse:
		return (void*)soap_instantiate__ns1__saveAgentResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__agent:
		return (void*)soap_instantiate__ns1__agent(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__saveAuctionRequest:
		return (void*)soap_instantiate__ns1__saveAuctionRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__saveAuctionResponse:
		return (void*)soap_instantiate__ns1__saveAuctionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__auction:
		return (void*)soap_instantiate__ns1__auction(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__saveBidRequest:
		return (void*)soap_instantiate__ns1__saveBidRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__saveBidResponse:
		return (void*)soap_instantiate__ns1__saveBidResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__bid:
		return (void*)soap_instantiate__ns1__bid(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__solution:
		return (void*)soap_instantiate__ns1__solution(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__partySolution:
		return (void*)soap_instantiate__ns1__partySolution(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__marketSolution:
		return (void*)soap_instantiate__ns1__marketSolution(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__msg:
		return (void*)soap_instantiate__ns1__msg(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__saveSolutionRequest:
		return (void*)soap_instantiate__ns1__saveSolutionRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__saveAuction:
		return (void*)soap_instantiate___ns1__saveAuction(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__saveBid:
		return (void*)soap_instantiate___ns1__saveBid(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__saveAgent:
		return (void*)soap_instantiate___ns1__saveAgent(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__saveSolutionResponse:
		return (void*)soap_instantiate___ns1__saveSolutionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__saveSolution:
		return (void*)soap_instantiate___ns1__saveSolution(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__market:
		return (void*)soap_instantiate___ns1__market(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__date:
		return (void*)soap_instantiate_xsd__date(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__msg:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTo_ns1__msg(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__partySolution:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTo_ns1__partySolution(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__point:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTo_ns1__point(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__party:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTo_ns1__party(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__ns1__marketRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns1__marketRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__marketRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns1__marketResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__marketResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__marketResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__market:
		if (p->size < 0)
			SOAP_DELETE((_ns1__market*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__market*)p->ptr);
		break;
	case SOAP_TYPE__ns1__party:
		if (p->size < 0)
			SOAP_DELETE((_ns1__party*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__party*)p->ptr);
		break;
	case SOAP_TYPE__ns1__func:
		if (p->size < 0)
			SOAP_DELETE((_ns1__func*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__func*)p->ptr);
		break;
	case SOAP_TYPE__ns1__point:
		if (p->size < 0)
			SOAP_DELETE((_ns1__point*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__point*)p->ptr);
		break;
	case SOAP_TYPE__ns1__saveAgentRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns1__saveAgentRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__saveAgentRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns1__saveAgentResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__saveAgentResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__saveAgentResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__agent:
		if (p->size < 0)
			SOAP_DELETE((_ns1__agent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__agent*)p->ptr);
		break;
	case SOAP_TYPE__ns1__saveAuctionRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns1__saveAuctionRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__saveAuctionRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns1__saveAuctionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__saveAuctionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__saveAuctionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__auction:
		if (p->size < 0)
			SOAP_DELETE((_ns1__auction*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__auction*)p->ptr);
		break;
	case SOAP_TYPE__ns1__saveBidRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns1__saveBidRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__saveBidRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns1__saveBidResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__saveBidResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__saveBidResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__bid:
		if (p->size < 0)
			SOAP_DELETE((_ns1__bid*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__bid*)p->ptr);
		break;
	case SOAP_TYPE__ns1__solution:
		if (p->size < 0)
			SOAP_DELETE((_ns1__solution*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__solution*)p->ptr);
		break;
	case SOAP_TYPE__ns1__partySolution:
		if (p->size < 0)
			SOAP_DELETE((_ns1__partySolution*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__partySolution*)p->ptr);
		break;
	case SOAP_TYPE__ns1__marketSolution:
		if (p->size < 0)
			SOAP_DELETE((_ns1__marketSolution*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__marketSolution*)p->ptr);
		break;
	case SOAP_TYPE__ns1__msg:
		if (p->size < 0)
			SOAP_DELETE((_ns1__msg*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__msg*)p->ptr);
		break;
	case SOAP_TYPE__ns1__saveSolutionRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns1__saveSolutionRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__saveSolutionRequest*)p->ptr);
		break;
	case SOAP_TYPE___ns1__saveAuction:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__saveAuction*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__saveAuction*)p->ptr);
		break;
	case SOAP_TYPE___ns1__saveBid:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__saveBid*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__saveBid*)p->ptr);
		break;
	case SOAP_TYPE___ns1__saveAgent:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__saveAgent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__saveAgent*)p->ptr);
		break;
	case SOAP_TYPE___ns1__saveSolutionResponse:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__saveSolutionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__saveSolutionResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__saveSolution:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__saveSolution*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__saveSolution*)p->ptr);
		break;
	case SOAP_TYPE___ns1__market:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__market*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__market*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_xsd__date:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__msg:
		if (p->size < 0)
			SOAP_DELETE((std::vector<_ns1__msg * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<_ns1__msg * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__partySolution:
		if (p->size < 0)
			SOAP_DELETE((std::vector<_ns1__partySolution * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<_ns1__partySolution * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__point:
		if (p->size < 0)
			SOAP_DELETE((std::vector<_ns1__point * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<_ns1__point * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__party:
		if (p->size < 0)
			SOAP_DELETE((std::vector<_ns1__party * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<_ns1__party * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__msg:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns1__msg * >*)p)[len] = *(_ns1__msg **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__partySolution:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns1__partySolution * >*)p)[len] = *(_ns1__partySolution **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__point:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns1__point * >*)p)[len] = *(_ns1__point **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__party:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns1__party * >*)p)[len] = *(_ns1__party **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__saveSolutionRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__saveSolutionRequest::solution = NULL;
	/* transient soap skipped */
}

void _ns1__saveSolutionRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__solution(soap, &this->_ns1__saveSolutionRequest::solution);
	/* transient soap skipped */
}

int _ns1__saveSolutionRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__saveSolutionRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__saveSolutionRequest(struct soap *soap, const char *tag, int id, const _ns1__saveSolutionRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__saveSolutionRequest), type))
		return soap->error;
	if (a->_ns1__saveSolutionRequest::solution)
	{	if (soap_out_PointerTo_ns1__solution(soap, "solution", -1, &a->_ns1__saveSolutionRequest::solution, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "solution"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__saveSolutionRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__saveSolutionRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__saveSolutionRequest * SOAP_FMAC4 soap_in__ns1__saveSolutionRequest(struct soap *soap, const char *tag, _ns1__saveSolutionRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__saveSolutionRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__saveSolutionRequest, sizeof(_ns1__saveSolutionRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__saveSolutionRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__saveSolutionRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_solution1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_solution1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__solution(soap, "solution", &(a->_ns1__saveSolutionRequest::solution), ""))
				{	soap_flag_solution1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__saveSolutionRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__saveSolutionRequest, 0, sizeof(_ns1__saveSolutionRequest), 0, soap_copy__ns1__saveSolutionRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_solution1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__saveSolutionRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__saveSolutionRequest);
	if (this->soap_out(soap, tag?tag:"ns1:saveSolutionRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__saveSolutionRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__saveSolutionRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__saveSolutionRequest * SOAP_FMAC4 soap_get__ns1__saveSolutionRequest(struct soap *soap, _ns1__saveSolutionRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__saveSolutionRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__saveSolutionRequest * SOAP_FMAC2 soap_instantiate__ns1__saveSolutionRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__saveSolutionRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__saveSolutionRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveSolutionRequest);
		if (size)
			*size = sizeof(_ns1__saveSolutionRequest);
		((_ns1__saveSolutionRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveSolutionRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__saveSolutionRequest);
		for (int i = 0; i < n; i++)
			((_ns1__saveSolutionRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__saveSolutionRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__saveSolutionRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__saveSolutionRequest %p -> %p\n", q, p));
	*(_ns1__saveSolutionRequest*)p = *(_ns1__saveSolutionRequest*)q;
}

void _ns1__msg::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__msg::msgType);
	soap_default_LONG64(soap, &this->_ns1__msg::idMarket);
	soap_default_int(soap, &this->_ns1__msg::idParty);
	soap_default_std__string(soap, &this->_ns1__msg::msg);
	soap_default_int(soap, &this->_ns1__msg::seq);
	/* transient soap skipped */
}

void _ns1__msg::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__msg::msg);
	/* transient soap skipped */
}

int _ns1__msg::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__msg(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__msg(struct soap *soap, const char *tag, int id, const _ns1__msg *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__msg), type))
		return soap->error;
	if (soap_out_int(soap, "msgType", -1, &(a->_ns1__msg::msgType), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "idMarket", -1, &(a->_ns1__msg::idMarket), ""))
		return soap->error;
	if (soap_out_int(soap, "idParty", -1, &(a->_ns1__msg::idParty), ""))
		return soap->error;
	if (soap_out_std__string(soap, "msg", -1, &(a->_ns1__msg::msg), ""))
		return soap->error;
	if (soap_out_int(soap, "seq", -1, &(a->_ns1__msg::seq), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__msg::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__msg(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__msg * SOAP_FMAC4 soap_in__ns1__msg(struct soap *soap, const char *tag, _ns1__msg *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__msg *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__msg, sizeof(_ns1__msg), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__msg)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__msg *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_msgType1 = 1;
	size_t soap_flag_idMarket1 = 1;
	size_t soap_flag_idParty1 = 1;
	size_t soap_flag_msg1 = 1;
	size_t soap_flag_seq1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_msgType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "msgType", &(a->_ns1__msg::msgType), "xsd:int"))
				{	soap_flag_msgType1--;
					continue;
				}
			if (soap_flag_idMarket1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idMarket", &(a->_ns1__msg::idMarket), "xsd:long"))
				{	soap_flag_idMarket1--;
					continue;
				}
			if (soap_flag_idParty1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "idParty", &(a->_ns1__msg::idParty), "xsd:int"))
				{	soap_flag_idParty1--;
					continue;
				}
			if (soap_flag_msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "msg", &(a->_ns1__msg::msg), "xsd:string"))
				{	soap_flag_msg1--;
					continue;
				}
			if (soap_flag_seq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "seq", &(a->_ns1__msg::seq), "xsd:int"))
				{	soap_flag_seq1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__msg *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__msg, 0, sizeof(_ns1__msg), 0, soap_copy__ns1__msg);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_msgType1 > 0 || soap_flag_idMarket1 > 0 || soap_flag_idParty1 > 0 || soap_flag_msg1 > 0 || soap_flag_seq1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__msg::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__msg);
	if (this->soap_out(soap, tag?tag:"ns1:msg", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__msg::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__msg(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__msg * SOAP_FMAC4 soap_get__ns1__msg(struct soap *soap, _ns1__msg *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__msg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__msg * SOAP_FMAC2 soap_instantiate__ns1__msg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__msg(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__msg, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__msg);
		if (size)
			*size = sizeof(_ns1__msg);
		((_ns1__msg*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__msg[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__msg);
		for (int i = 0; i < n; i++)
			((_ns1__msg*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__msg*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__msg(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__msg %p -> %p\n", q, p));
	*(_ns1__msg*)p = *(_ns1__msg*)q;
}

void _ns1__marketSolution::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_ns1__marketSolution::idMarket);
	soap_default_double(soap, &this->_ns1__marketSolution::mrgCost);
	soap_default_double(soap, &this->_ns1__marketSolution::profit);
	/* transient soap skipped */
}

void _ns1__marketSolution::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__marketSolution::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__marketSolution(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__marketSolution(struct soap *soap, const char *tag, int id, const _ns1__marketSolution *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__marketSolution), type))
		return soap->error;
	if (soap_out_LONG64(soap, "idMarket", -1, &(a->_ns1__marketSolution::idMarket), ""))
		return soap->error;
	if (soap_out_double(soap, "mrgCost", -1, &(a->_ns1__marketSolution::mrgCost), ""))
		return soap->error;
	if (soap_out_double(soap, "profit", -1, &(a->_ns1__marketSolution::profit), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__marketSolution::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__marketSolution(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__marketSolution * SOAP_FMAC4 soap_in__ns1__marketSolution(struct soap *soap, const char *tag, _ns1__marketSolution *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__marketSolution *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__marketSolution, sizeof(_ns1__marketSolution), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__marketSolution)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__marketSolution *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_idMarket1 = 1;
	size_t soap_flag_mrgCost1 = 1;
	size_t soap_flag_profit1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_idMarket1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idMarket", &(a->_ns1__marketSolution::idMarket), "xsd:long"))
				{	soap_flag_idMarket1--;
					continue;
				}
			if (soap_flag_mrgCost1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "mrgCost", &(a->_ns1__marketSolution::mrgCost), "xsd:double"))
				{	soap_flag_mrgCost1--;
					continue;
				}
			if (soap_flag_profit1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "profit", &(a->_ns1__marketSolution::profit), "xsd:double"))
				{	soap_flag_profit1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__marketSolution *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__marketSolution, 0, sizeof(_ns1__marketSolution), 0, soap_copy__ns1__marketSolution);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_idMarket1 > 0 || soap_flag_mrgCost1 > 0 || soap_flag_profit1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__marketSolution::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__marketSolution);
	if (this->soap_out(soap, tag?tag:"ns1:marketSolution", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__marketSolution::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__marketSolution(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__marketSolution * SOAP_FMAC4 soap_get__ns1__marketSolution(struct soap *soap, _ns1__marketSolution *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__marketSolution(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__marketSolution * SOAP_FMAC2 soap_instantiate__ns1__marketSolution(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__marketSolution(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__marketSolution, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__marketSolution);
		if (size)
			*size = sizeof(_ns1__marketSolution);
		((_ns1__marketSolution*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__marketSolution[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__marketSolution);
		for (int i = 0; i < n; i++)
			((_ns1__marketSolution*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__marketSolution*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__marketSolution(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__marketSolution %p -> %p\n", q, p));
	*(_ns1__marketSolution*)p = *(_ns1__marketSolution*)q;
}

void _ns1__partySolution::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_ns1__partySolution::idMarket);
	soap_default_int(soap, &this->_ns1__partySolution::idParty);
	soap_default_double(soap, &this->_ns1__partySolution::em);
	soap_default_double(soap, &this->_ns1__partySolution::mrgEm);
	soap_default_double(soap, &this->_ns1__partySolution::mrgBase);
	soap_default_double(soap, &this->_ns1__partySolution::mrgTarget);
	soap_default_double(soap, &this->_ns1__partySolution::costBase);
	soap_default_double(soap, &this->_ns1__partySolution::costEm);
	soap_default_double(soap, &this->_ns1__partySolution::costTarget);
	soap_default_double(soap, &this->_ns1__partySolution::profit);
	/* transient soap skipped */
}

void _ns1__partySolution::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__partySolution::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__partySolution(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__partySolution(struct soap *soap, const char *tag, int id, const _ns1__partySolution *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__partySolution), type))
		return soap->error;
	if (soap_out_LONG64(soap, "idMarket", -1, &(a->_ns1__partySolution::idMarket), ""))
		return soap->error;
	if (soap_out_int(soap, "idParty", -1, &(a->_ns1__partySolution::idParty), ""))
		return soap->error;
	if (soap_out_double(soap, "em", -1, &(a->_ns1__partySolution::em), ""))
		return soap->error;
	if (soap_out_double(soap, "mrgEm", -1, &(a->_ns1__partySolution::mrgEm), ""))
		return soap->error;
	if (soap_out_double(soap, "mrgBase", -1, &(a->_ns1__partySolution::mrgBase), ""))
		return soap->error;
	if (soap_out_double(soap, "mrgTarget", -1, &(a->_ns1__partySolution::mrgTarget), ""))
		return soap->error;
	if (soap_out_double(soap, "costBase", -1, &(a->_ns1__partySolution::costBase), ""))
		return soap->error;
	if (soap_out_double(soap, "costEm", -1, &(a->_ns1__partySolution::costEm), ""))
		return soap->error;
	if (soap_out_double(soap, "costTarget", -1, &(a->_ns1__partySolution::costTarget), ""))
		return soap->error;
	if (soap_out_double(soap, "profit", -1, &(a->_ns1__partySolution::profit), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__partySolution::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__partySolution(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__partySolution * SOAP_FMAC4 soap_in__ns1__partySolution(struct soap *soap, const char *tag, _ns1__partySolution *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__partySolution *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__partySolution, sizeof(_ns1__partySolution), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__partySolution)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__partySolution *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_idMarket1 = 1;
	size_t soap_flag_idParty1 = 1;
	size_t soap_flag_em1 = 1;
	size_t soap_flag_mrgEm1 = 1;
	size_t soap_flag_mrgBase1 = 1;
	size_t soap_flag_mrgTarget1 = 1;
	size_t soap_flag_costBase1 = 1;
	size_t soap_flag_costEm1 = 1;
	size_t soap_flag_costTarget1 = 1;
	size_t soap_flag_profit1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_idMarket1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idMarket", &(a->_ns1__partySolution::idMarket), "xsd:long"))
				{	soap_flag_idMarket1--;
					continue;
				}
			if (soap_flag_idParty1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "idParty", &(a->_ns1__partySolution::idParty), "xsd:int"))
				{	soap_flag_idParty1--;
					continue;
				}
			if (soap_flag_em1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "em", &(a->_ns1__partySolution::em), "xsd:double"))
				{	soap_flag_em1--;
					continue;
				}
			if (soap_flag_mrgEm1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "mrgEm", &(a->_ns1__partySolution::mrgEm), "xsd:double"))
				{	soap_flag_mrgEm1--;
					continue;
				}
			if (soap_flag_mrgBase1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "mrgBase", &(a->_ns1__partySolution::mrgBase), "xsd:double"))
				{	soap_flag_mrgBase1--;
					continue;
				}
			if (soap_flag_mrgTarget1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "mrgTarget", &(a->_ns1__partySolution::mrgTarget), "xsd:double"))
				{	soap_flag_mrgTarget1--;
					continue;
				}
			if (soap_flag_costBase1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "costBase", &(a->_ns1__partySolution::costBase), "xsd:double"))
				{	soap_flag_costBase1--;
					continue;
				}
			if (soap_flag_costEm1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "costEm", &(a->_ns1__partySolution::costEm), "xsd:double"))
				{	soap_flag_costEm1--;
					continue;
				}
			if (soap_flag_costTarget1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "costTarget", &(a->_ns1__partySolution::costTarget), "xsd:double"))
				{	soap_flag_costTarget1--;
					continue;
				}
			if (soap_flag_profit1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "profit", &(a->_ns1__partySolution::profit), "xsd:double"))
				{	soap_flag_profit1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__partySolution *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__partySolution, 0, sizeof(_ns1__partySolution), 0, soap_copy__ns1__partySolution);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_idMarket1 > 0 || soap_flag_idParty1 > 0 || soap_flag_em1 > 0 || soap_flag_mrgEm1 > 0 || soap_flag_mrgBase1 > 0 || soap_flag_mrgTarget1 > 0 || soap_flag_costBase1 > 0 || soap_flag_costEm1 > 0 || soap_flag_costTarget1 > 0 || soap_flag_profit1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__partySolution::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__partySolution);
	if (this->soap_out(soap, tag?tag:"ns1:partySolution", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__partySolution::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__partySolution(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__partySolution * SOAP_FMAC4 soap_get__ns1__partySolution(struct soap *soap, _ns1__partySolution *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__partySolution(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__partySolution * SOAP_FMAC2 soap_instantiate__ns1__partySolution(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__partySolution(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__partySolution, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__partySolution);
		if (size)
			*size = sizeof(_ns1__partySolution);
		((_ns1__partySolution*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__partySolution[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__partySolution);
		for (int i = 0; i < n; i++)
			((_ns1__partySolution*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__partySolution*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__partySolution(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__partySolution %p -> %p\n", q, p));
	*(_ns1__partySolution*)p = *(_ns1__partySolution*)q;
}

void _ns1__solution::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__solution::status);
	soap_default_int(soap, &this->_ns1__solution::solverStatus);
	this->_ns1__solution::marketSolution = NULL;
	soap_default_std__vectorTemplateOfPointerTo_ns1__partySolution(soap, &this->_ns1__solution::partySolution);
	soap_default_std__vectorTemplateOfPointerTo_ns1__msg(soap, &this->_ns1__solution::msg);
	/* transient soap skipped */
}

void _ns1__solution::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__marketSolution(soap, &this->_ns1__solution::marketSolution);
	soap_serialize_std__vectorTemplateOfPointerTo_ns1__partySolution(soap, &this->_ns1__solution::partySolution);
	soap_serialize_std__vectorTemplateOfPointerTo_ns1__msg(soap, &this->_ns1__solution::msg);
	/* transient soap skipped */
}

int _ns1__solution::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__solution(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__solution(struct soap *soap, const char *tag, int id, const _ns1__solution *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__solution), type))
		return soap->error;
	if (soap_out_int(soap, "status", -1, &(a->_ns1__solution::status), ""))
		return soap->error;
	if (soap_out_int(soap, "solverStatus", -1, &(a->_ns1__solution::solverStatus), ""))
		return soap->error;
	if (a->_ns1__solution::marketSolution)
	{	if (soap_out_PointerTo_ns1__marketSolution(soap, "marketSolution", -1, &a->_ns1__solution::marketSolution, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "marketSolution"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTo_ns1__partySolution(soap, "partySolution", -1, &(a->_ns1__solution::partySolution), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTo_ns1__msg(soap, "msg", -1, &(a->_ns1__solution::msg), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__solution::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__solution(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__solution * SOAP_FMAC4 soap_in__ns1__solution(struct soap *soap, const char *tag, _ns1__solution *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__solution *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__solution, sizeof(_ns1__solution), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__solution)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__solution *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_status1 = 1;
	size_t soap_flag_solverStatus1 = 1;
	size_t soap_flag_marketSolution1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "status", &(a->_ns1__solution::status), "xsd:int"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap_flag_solverStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "solverStatus", &(a->_ns1__solution::solverStatus), "xsd:int"))
				{	soap_flag_solverStatus1--;
					continue;
				}
			if (soap_flag_marketSolution1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__marketSolution(soap, "marketSolution", &(a->_ns1__solution::marketSolution), ""))
				{	soap_flag_marketSolution1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTo_ns1__partySolution(soap, "partySolution", &(a->_ns1__solution::partySolution), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTo_ns1__msg(soap, "msg", &(a->_ns1__solution::msg), ""))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__solution *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__solution, 0, sizeof(_ns1__solution), 0, soap_copy__ns1__solution);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status1 > 0 || soap_flag_solverStatus1 > 0 || soap_flag_marketSolution1 > 0 || a->_ns1__solution::partySolution.size() < 1 || a->_ns1__solution::msg.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__solution::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__solution);
	if (this->soap_out(soap, tag?tag:"ns1:solution", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__solution::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__solution(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__solution * SOAP_FMAC4 soap_get__ns1__solution(struct soap *soap, _ns1__solution *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__solution(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__solution * SOAP_FMAC2 soap_instantiate__ns1__solution(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__solution(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__solution, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__solution);
		if (size)
			*size = sizeof(_ns1__solution);
		((_ns1__solution*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__solution[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__solution);
		for (int i = 0; i < n; i++)
			((_ns1__solution*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__solution*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__solution(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__solution %p -> %p\n", q, p));
	*(_ns1__solution*)p = *(_ns1__solution*)q;
}

void _ns1__bid::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__bid::idBid);
	soap_default_LONG64(soap, &this->_ns1__bid::idAuction);
	soap_default_LONG64(soap, &this->_ns1__bid::idAgent);
	soap_default_double(soap, &this->_ns1__bid::price);
	soap_default_xsd__date(soap, &this->_ns1__bid::time);
	/* transient soap skipped */
}

void _ns1__bid::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__date(soap, &this->_ns1__bid::time);
	/* transient soap skipped */
}

int _ns1__bid::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__bid(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__bid(struct soap *soap, const char *tag, int id, const _ns1__bid *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__bid), type))
		return soap->error;
	if (soap_out_int(soap, "idBid", -1, &(a->_ns1__bid::idBid), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "idAuction", -1, &(a->_ns1__bid::idAuction), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "idAgent", -1, &(a->_ns1__bid::idAgent), ""))
		return soap->error;
	if (soap_out_double(soap, "price", -1, &(a->_ns1__bid::price), ""))
		return soap->error;
	if (soap_out_xsd__date(soap, "time", -1, &(a->_ns1__bid::time), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__bid::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__bid(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__bid * SOAP_FMAC4 soap_in__ns1__bid(struct soap *soap, const char *tag, _ns1__bid *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__bid *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__bid, sizeof(_ns1__bid), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__bid)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__bid *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_idBid1 = 1;
	size_t soap_flag_idAuction1 = 1;
	size_t soap_flag_idAgent1 = 1;
	size_t soap_flag_price1 = 1;
	size_t soap_flag_time1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_idBid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "idBid", &(a->_ns1__bid::idBid), "xsd:int"))
				{	soap_flag_idBid1--;
					continue;
				}
			if (soap_flag_idAuction1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idAuction", &(a->_ns1__bid::idAuction), "xsd:long"))
				{	soap_flag_idAuction1--;
					continue;
				}
			if (soap_flag_idAgent1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idAgent", &(a->_ns1__bid::idAgent), "xsd:long"))
				{	soap_flag_idAgent1--;
					continue;
				}
			if (soap_flag_price1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "price", &(a->_ns1__bid::price), "xsd:double"))
				{	soap_flag_price1--;
					continue;
				}
			if (soap_flag_time1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__date(soap, "time", &(a->_ns1__bid::time), "xsd:date"))
				{	soap_flag_time1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__bid *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__bid, 0, sizeof(_ns1__bid), 0, soap_copy__ns1__bid);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_idBid1 > 0 || soap_flag_idAuction1 > 0 || soap_flag_idAgent1 > 0 || soap_flag_price1 > 0 || soap_flag_time1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__bid::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__bid);
	if (this->soap_out(soap, tag?tag:"ns1:bid", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__bid::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__bid(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__bid * SOAP_FMAC4 soap_get__ns1__bid(struct soap *soap, _ns1__bid *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__bid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__bid * SOAP_FMAC2 soap_instantiate__ns1__bid(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__bid(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__bid, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__bid);
		if (size)
			*size = sizeof(_ns1__bid);
		((_ns1__bid*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__bid[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__bid);
		for (int i = 0; i < n; i++)
			((_ns1__bid*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__bid*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__bid(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__bid %p -> %p\n", q, p));
	*(_ns1__bid*)p = *(_ns1__bid*)q;
}

void _ns1__saveBidResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__saveBidResponse::bid = NULL;
	/* transient soap skipped */
}

void _ns1__saveBidResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__bid(soap, &this->_ns1__saveBidResponse::bid);
	/* transient soap skipped */
}

int _ns1__saveBidResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__saveBidResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__saveBidResponse(struct soap *soap, const char *tag, int id, const _ns1__saveBidResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__saveBidResponse), type))
		return soap->error;
	if (a->_ns1__saveBidResponse::bid)
	{	if (soap_out_PointerTo_ns1__bid(soap, "bid", -1, &a->_ns1__saveBidResponse::bid, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "bid"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__saveBidResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__saveBidResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__saveBidResponse * SOAP_FMAC4 soap_in__ns1__saveBidResponse(struct soap *soap, const char *tag, _ns1__saveBidResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__saveBidResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__saveBidResponse, sizeof(_ns1__saveBidResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__saveBidResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__saveBidResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_bid1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_bid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__bid(soap, "bid", &(a->_ns1__saveBidResponse::bid), ""))
				{	soap_flag_bid1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__saveBidResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__saveBidResponse, 0, sizeof(_ns1__saveBidResponse), 0, soap_copy__ns1__saveBidResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_bid1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__saveBidResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__saveBidResponse);
	if (this->soap_out(soap, tag?tag:"ns1:saveBidResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__saveBidResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__saveBidResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__saveBidResponse * SOAP_FMAC4 soap_get__ns1__saveBidResponse(struct soap *soap, _ns1__saveBidResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__saveBidResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__saveBidResponse * SOAP_FMAC2 soap_instantiate__ns1__saveBidResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__saveBidResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__saveBidResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveBidResponse);
		if (size)
			*size = sizeof(_ns1__saveBidResponse);
		((_ns1__saveBidResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveBidResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__saveBidResponse);
		for (int i = 0; i < n; i++)
			((_ns1__saveBidResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__saveBidResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__saveBidResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__saveBidResponse %p -> %p\n", q, p));
	*(_ns1__saveBidResponse*)p = *(_ns1__saveBidResponse*)q;
}

void _ns1__saveBidRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__saveBidRequest::bid = NULL;
	/* transient soap skipped */
}

void _ns1__saveBidRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__bid(soap, &this->_ns1__saveBidRequest::bid);
	/* transient soap skipped */
}

int _ns1__saveBidRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__saveBidRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__saveBidRequest(struct soap *soap, const char *tag, int id, const _ns1__saveBidRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__saveBidRequest), type))
		return soap->error;
	if (a->_ns1__saveBidRequest::bid)
	{	if (soap_out_PointerTo_ns1__bid(soap, "bid", -1, &a->_ns1__saveBidRequest::bid, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "bid"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__saveBidRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__saveBidRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__saveBidRequest * SOAP_FMAC4 soap_in__ns1__saveBidRequest(struct soap *soap, const char *tag, _ns1__saveBidRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__saveBidRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__saveBidRequest, sizeof(_ns1__saveBidRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__saveBidRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__saveBidRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_bid1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_bid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__bid(soap, "bid", &(a->_ns1__saveBidRequest::bid), ""))
				{	soap_flag_bid1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__saveBidRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__saveBidRequest, 0, sizeof(_ns1__saveBidRequest), 0, soap_copy__ns1__saveBidRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_bid1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__saveBidRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__saveBidRequest);
	if (this->soap_out(soap, tag?tag:"ns1:saveBidRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__saveBidRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__saveBidRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__saveBidRequest * SOAP_FMAC4 soap_get__ns1__saveBidRequest(struct soap *soap, _ns1__saveBidRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__saveBidRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__saveBidRequest * SOAP_FMAC2 soap_instantiate__ns1__saveBidRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__saveBidRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__saveBidRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveBidRequest);
		if (size)
			*size = sizeof(_ns1__saveBidRequest);
		((_ns1__saveBidRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveBidRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__saveBidRequest);
		for (int i = 0; i < n; i++)
			((_ns1__saveBidRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__saveBidRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__saveBidRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__saveBidRequest %p -> %p\n", q, p));
	*(_ns1__saveBidRequest*)p = *(_ns1__saveBidRequest*)q;
}

void _ns1__auction::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_ns1__auction::idAuction);
	soap_default_LONG64(soap, &this->_ns1__auction::idMarket);
	soap_default_LONG64(soap, &this->_ns1__auction::idAgentBuyer);
	soap_default_LONG64(soap, &this->_ns1__auction::idAgentSeller);
	soap_default_double(soap, &this->_ns1__auction::winPrice);
	soap_default_double(soap, &this->_ns1__auction::minPrice);
	soap_default_xsd__date(soap, &this->_ns1__auction::startTime);
	soap_default_xsd__date(soap, &this->_ns1__auction::endTime);
	soap_default_int(soap, &this->_ns1__auction::units);
	soap_default_double(soap, &this->_ns1__auction::minIncrease);
	/* transient soap skipped */
}

void _ns1__auction::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__date(soap, &this->_ns1__auction::startTime);
	soap_serialize_xsd__date(soap, &this->_ns1__auction::endTime);
	/* transient soap skipped */
}

int _ns1__auction::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__auction(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__auction(struct soap *soap, const char *tag, int id, const _ns1__auction *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__auction), type))
		return soap->error;
	if (soap_out_LONG64(soap, "idAuction", -1, &(a->_ns1__auction::idAuction), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "idMarket", -1, &(a->_ns1__auction::idMarket), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "idAgentBuyer", -1, &(a->_ns1__auction::idAgentBuyer), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "idAgentSeller", -1, &(a->_ns1__auction::idAgentSeller), ""))
		return soap->error;
	if (soap_out_double(soap, "winPrice", -1, &(a->_ns1__auction::winPrice), ""))
		return soap->error;
	if (soap_out_double(soap, "minPrice", -1, &(a->_ns1__auction::minPrice), ""))
		return soap->error;
	if (soap_out_xsd__date(soap, "startTime", -1, &(a->_ns1__auction::startTime), ""))
		return soap->error;
	if (soap_out_xsd__date(soap, "endTime", -1, &(a->_ns1__auction::endTime), ""))
		return soap->error;
	if (soap_out_int(soap, "units", -1, &(a->_ns1__auction::units), ""))
		return soap->error;
	if (soap_out_double(soap, "minIncrease", -1, &(a->_ns1__auction::minIncrease), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__auction::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__auction(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__auction * SOAP_FMAC4 soap_in__ns1__auction(struct soap *soap, const char *tag, _ns1__auction *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__auction *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__auction, sizeof(_ns1__auction), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__auction)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__auction *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_idAuction1 = 1;
	size_t soap_flag_idMarket1 = 1;
	size_t soap_flag_idAgentBuyer1 = 1;
	size_t soap_flag_idAgentSeller1 = 1;
	size_t soap_flag_winPrice1 = 1;
	size_t soap_flag_minPrice1 = 1;
	size_t soap_flag_startTime1 = 1;
	size_t soap_flag_endTime1 = 1;
	size_t soap_flag_units1 = 1;
	size_t soap_flag_minIncrease1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_idAuction1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idAuction", &(a->_ns1__auction::idAuction), "xsd:long"))
				{	soap_flag_idAuction1--;
					continue;
				}
			if (soap_flag_idMarket1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idMarket", &(a->_ns1__auction::idMarket), "xsd:long"))
				{	soap_flag_idMarket1--;
					continue;
				}
			if (soap_flag_idAgentBuyer1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idAgentBuyer", &(a->_ns1__auction::idAgentBuyer), "xsd:long"))
				{	soap_flag_idAgentBuyer1--;
					continue;
				}
			if (soap_flag_idAgentSeller1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idAgentSeller", &(a->_ns1__auction::idAgentSeller), "xsd:long"))
				{	soap_flag_idAgentSeller1--;
					continue;
				}
			if (soap_flag_winPrice1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "winPrice", &(a->_ns1__auction::winPrice), "xsd:double"))
				{	soap_flag_winPrice1--;
					continue;
				}
			if (soap_flag_minPrice1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "minPrice", &(a->_ns1__auction::minPrice), "xsd:double"))
				{	soap_flag_minPrice1--;
					continue;
				}
			if (soap_flag_startTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__date(soap, "startTime", &(a->_ns1__auction::startTime), "xsd:date"))
				{	soap_flag_startTime1--;
					continue;
				}
			if (soap_flag_endTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__date(soap, "endTime", &(a->_ns1__auction::endTime), "xsd:date"))
				{	soap_flag_endTime1--;
					continue;
				}
			if (soap_flag_units1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "units", &(a->_ns1__auction::units), "xsd:int"))
				{	soap_flag_units1--;
					continue;
				}
			if (soap_flag_minIncrease1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "minIncrease", &(a->_ns1__auction::minIncrease), "xsd:double"))
				{	soap_flag_minIncrease1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__auction *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__auction, 0, sizeof(_ns1__auction), 0, soap_copy__ns1__auction);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_idAuction1 > 0 || soap_flag_idMarket1 > 0 || soap_flag_idAgentBuyer1 > 0 || soap_flag_idAgentSeller1 > 0 || soap_flag_winPrice1 > 0 || soap_flag_minPrice1 > 0 || soap_flag_startTime1 > 0 || soap_flag_endTime1 > 0 || soap_flag_units1 > 0 || soap_flag_minIncrease1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__auction::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__auction);
	if (this->soap_out(soap, tag?tag:"ns1:auction", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__auction::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__auction(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__auction * SOAP_FMAC4 soap_get__ns1__auction(struct soap *soap, _ns1__auction *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__auction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__auction * SOAP_FMAC2 soap_instantiate__ns1__auction(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__auction(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__auction, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__auction);
		if (size)
			*size = sizeof(_ns1__auction);
		((_ns1__auction*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__auction[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__auction);
		for (int i = 0; i < n; i++)
			((_ns1__auction*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__auction*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__auction(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__auction %p -> %p\n", q, p));
	*(_ns1__auction*)p = *(_ns1__auction*)q;
}

void _ns1__saveAuctionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__saveAuctionResponse::auction = NULL;
	/* transient soap skipped */
}

void _ns1__saveAuctionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__auction(soap, &this->_ns1__saveAuctionResponse::auction);
	/* transient soap skipped */
}

int _ns1__saveAuctionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__saveAuctionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__saveAuctionResponse(struct soap *soap, const char *tag, int id, const _ns1__saveAuctionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__saveAuctionResponse), type))
		return soap->error;
	if (a->_ns1__saveAuctionResponse::auction)
	{	if (soap_out_PointerTo_ns1__auction(soap, "auction", -1, &a->_ns1__saveAuctionResponse::auction, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "auction"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__saveAuctionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__saveAuctionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__saveAuctionResponse * SOAP_FMAC4 soap_in__ns1__saveAuctionResponse(struct soap *soap, const char *tag, _ns1__saveAuctionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__saveAuctionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__saveAuctionResponse, sizeof(_ns1__saveAuctionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__saveAuctionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__saveAuctionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_auction1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_auction1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__auction(soap, "auction", &(a->_ns1__saveAuctionResponse::auction), ""))
				{	soap_flag_auction1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__saveAuctionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__saveAuctionResponse, 0, sizeof(_ns1__saveAuctionResponse), 0, soap_copy__ns1__saveAuctionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_auction1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__saveAuctionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__saveAuctionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:saveAuctionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__saveAuctionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__saveAuctionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__saveAuctionResponse * SOAP_FMAC4 soap_get__ns1__saveAuctionResponse(struct soap *soap, _ns1__saveAuctionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__saveAuctionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__saveAuctionResponse * SOAP_FMAC2 soap_instantiate__ns1__saveAuctionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__saveAuctionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__saveAuctionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveAuctionResponse);
		if (size)
			*size = sizeof(_ns1__saveAuctionResponse);
		((_ns1__saveAuctionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveAuctionResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__saveAuctionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__saveAuctionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__saveAuctionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__saveAuctionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__saveAuctionResponse %p -> %p\n", q, p));
	*(_ns1__saveAuctionResponse*)p = *(_ns1__saveAuctionResponse*)q;
}

void _ns1__saveAuctionRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__saveAuctionRequest::auction = NULL;
	/* transient soap skipped */
}

void _ns1__saveAuctionRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__auction(soap, &this->_ns1__saveAuctionRequest::auction);
	/* transient soap skipped */
}

int _ns1__saveAuctionRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__saveAuctionRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__saveAuctionRequest(struct soap *soap, const char *tag, int id, const _ns1__saveAuctionRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__saveAuctionRequest), type))
		return soap->error;
	if (a->_ns1__saveAuctionRequest::auction)
	{	if (soap_out_PointerTo_ns1__auction(soap, "auction", -1, &a->_ns1__saveAuctionRequest::auction, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "auction"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__saveAuctionRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__saveAuctionRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__saveAuctionRequest * SOAP_FMAC4 soap_in__ns1__saveAuctionRequest(struct soap *soap, const char *tag, _ns1__saveAuctionRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__saveAuctionRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__saveAuctionRequest, sizeof(_ns1__saveAuctionRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__saveAuctionRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__saveAuctionRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_auction1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_auction1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__auction(soap, "auction", &(a->_ns1__saveAuctionRequest::auction), ""))
				{	soap_flag_auction1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__saveAuctionRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__saveAuctionRequest, 0, sizeof(_ns1__saveAuctionRequest), 0, soap_copy__ns1__saveAuctionRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_auction1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__saveAuctionRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__saveAuctionRequest);
	if (this->soap_out(soap, tag?tag:"ns1:saveAuctionRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__saveAuctionRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__saveAuctionRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__saveAuctionRequest * SOAP_FMAC4 soap_get__ns1__saveAuctionRequest(struct soap *soap, _ns1__saveAuctionRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__saveAuctionRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__saveAuctionRequest * SOAP_FMAC2 soap_instantiate__ns1__saveAuctionRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__saveAuctionRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__saveAuctionRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveAuctionRequest);
		if (size)
			*size = sizeof(_ns1__saveAuctionRequest);
		((_ns1__saveAuctionRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveAuctionRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__saveAuctionRequest);
		for (int i = 0; i < n; i++)
			((_ns1__saveAuctionRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__saveAuctionRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__saveAuctionRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__saveAuctionRequest %p -> %p\n", q, p));
	*(_ns1__saveAuctionRequest*)p = *(_ns1__saveAuctionRequest*)q;
}

void _ns1__agent::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_ns1__agent::idAgent);
	soap_default_LONG64(soap, &this->_ns1__agent::idMarket);
	soap_default_int(soap, &this->_ns1__agent::idParty);
	soap_default_std__string(soap, &this->_ns1__agent::type);
	soap_default_int(soap, &this->_ns1__agent::riskFactor);
	soap_default_int(soap, &this->_ns1__agent::priceFactor);
	soap_default_double(soap, &this->_ns1__agent::currentEmission);
	soap_default_double(soap, &this->_ns1__agent::bilans);
	soap_default_std__string(soap, &this->_ns1__agent::stratery);
	/* transient soap skipped */
}

void _ns1__agent::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__agent::type);
	soap_serialize_std__string(soap, &this->_ns1__agent::stratery);
	/* transient soap skipped */
}

int _ns1__agent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__agent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__agent(struct soap *soap, const char *tag, int id, const _ns1__agent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__agent), type))
		return soap->error;
	if (soap_out_LONG64(soap, "idAgent", -1, &(a->_ns1__agent::idAgent), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "idMarket", -1, &(a->_ns1__agent::idMarket), ""))
		return soap->error;
	if (soap_out_int(soap, "idParty", -1, &(a->_ns1__agent::idParty), ""))
		return soap->error;
	if (soap_out_std__string(soap, "type", -1, &(a->_ns1__agent::type), ""))
		return soap->error;
	if (soap_out_int(soap, "riskFactor", -1, &(a->_ns1__agent::riskFactor), ""))
		return soap->error;
	if (soap_out_int(soap, "priceFactor", -1, &(a->_ns1__agent::priceFactor), ""))
		return soap->error;
	if (soap_out_double(soap, "currentEmission", -1, &(a->_ns1__agent::currentEmission), ""))
		return soap->error;
	if (soap_out_double(soap, "bilans", -1, &(a->_ns1__agent::bilans), ""))
		return soap->error;
	if (soap_out_std__string(soap, "stratery", -1, &(a->_ns1__agent::stratery), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__agent::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__agent(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__agent * SOAP_FMAC4 soap_in__ns1__agent(struct soap *soap, const char *tag, _ns1__agent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__agent *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__agent, sizeof(_ns1__agent), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__agent)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__agent *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_idAgent1 = 1;
	size_t soap_flag_idMarket1 = 1;
	size_t soap_flag_idParty1 = 1;
	size_t soap_flag_type1 = 1;
	size_t soap_flag_riskFactor1 = 1;
	size_t soap_flag_priceFactor1 = 1;
	size_t soap_flag_currentEmission1 = 1;
	size_t soap_flag_bilans1 = 1;
	size_t soap_flag_stratery1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_idAgent1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idAgent", &(a->_ns1__agent::idAgent), "xsd:long"))
				{	soap_flag_idAgent1--;
					continue;
				}
			if (soap_flag_idMarket1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idMarket", &(a->_ns1__agent::idMarket), "xsd:long"))
				{	soap_flag_idMarket1--;
					continue;
				}
			if (soap_flag_idParty1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "idParty", &(a->_ns1__agent::idParty), "xsd:int"))
				{	soap_flag_idParty1--;
					continue;
				}
			if (soap_flag_type1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "type", &(a->_ns1__agent::type), "xsd:string"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap_flag_riskFactor1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "riskFactor", &(a->_ns1__agent::riskFactor), "xsd:int"))
				{	soap_flag_riskFactor1--;
					continue;
				}
			if (soap_flag_priceFactor1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "priceFactor", &(a->_ns1__agent::priceFactor), "xsd:int"))
				{	soap_flag_priceFactor1--;
					continue;
				}
			if (soap_flag_currentEmission1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "currentEmission", &(a->_ns1__agent::currentEmission), "xsd:double"))
				{	soap_flag_currentEmission1--;
					continue;
				}
			if (soap_flag_bilans1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "bilans", &(a->_ns1__agent::bilans), "xsd:double"))
				{	soap_flag_bilans1--;
					continue;
				}
			if (soap_flag_stratery1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "stratery", &(a->_ns1__agent::stratery), "xsd:string"))
				{	soap_flag_stratery1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__agent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__agent, 0, sizeof(_ns1__agent), 0, soap_copy__ns1__agent);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_idAgent1 > 0 || soap_flag_idMarket1 > 0 || soap_flag_idParty1 > 0 || soap_flag_type1 > 0 || soap_flag_riskFactor1 > 0 || soap_flag_priceFactor1 > 0 || soap_flag_currentEmission1 > 0 || soap_flag_bilans1 > 0 || soap_flag_stratery1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__agent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__agent);
	if (this->soap_out(soap, tag?tag:"ns1:agent", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__agent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__agent(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__agent * SOAP_FMAC4 soap_get__ns1__agent(struct soap *soap, _ns1__agent *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__agent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__agent * SOAP_FMAC2 soap_instantiate__ns1__agent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__agent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__agent, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__agent);
		if (size)
			*size = sizeof(_ns1__agent);
		((_ns1__agent*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__agent[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__agent);
		for (int i = 0; i < n; i++)
			((_ns1__agent*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__agent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__agent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__agent %p -> %p\n", q, p));
	*(_ns1__agent*)p = *(_ns1__agent*)q;
}

void _ns1__saveAgentResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__saveAgentResponse::agent = NULL;
	/* transient soap skipped */
}

void _ns1__saveAgentResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__agent(soap, &this->_ns1__saveAgentResponse::agent);
	/* transient soap skipped */
}

int _ns1__saveAgentResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__saveAgentResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__saveAgentResponse(struct soap *soap, const char *tag, int id, const _ns1__saveAgentResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__saveAgentResponse), type))
		return soap->error;
	if (a->_ns1__saveAgentResponse::agent)
	{	if (soap_out_PointerTo_ns1__agent(soap, "agent", -1, &a->_ns1__saveAgentResponse::agent, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "agent"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__saveAgentResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__saveAgentResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__saveAgentResponse * SOAP_FMAC4 soap_in__ns1__saveAgentResponse(struct soap *soap, const char *tag, _ns1__saveAgentResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__saveAgentResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__saveAgentResponse, sizeof(_ns1__saveAgentResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__saveAgentResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__saveAgentResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_agent1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_agent1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__agent(soap, "agent", &(a->_ns1__saveAgentResponse::agent), ""))
				{	soap_flag_agent1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__saveAgentResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__saveAgentResponse, 0, sizeof(_ns1__saveAgentResponse), 0, soap_copy__ns1__saveAgentResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_agent1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__saveAgentResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__saveAgentResponse);
	if (this->soap_out(soap, tag?tag:"ns1:saveAgentResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__saveAgentResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__saveAgentResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__saveAgentResponse * SOAP_FMAC4 soap_get__ns1__saveAgentResponse(struct soap *soap, _ns1__saveAgentResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__saveAgentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__saveAgentResponse * SOAP_FMAC2 soap_instantiate__ns1__saveAgentResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__saveAgentResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__saveAgentResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveAgentResponse);
		if (size)
			*size = sizeof(_ns1__saveAgentResponse);
		((_ns1__saveAgentResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveAgentResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__saveAgentResponse);
		for (int i = 0; i < n; i++)
			((_ns1__saveAgentResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__saveAgentResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__saveAgentResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__saveAgentResponse %p -> %p\n", q, p));
	*(_ns1__saveAgentResponse*)p = *(_ns1__saveAgentResponse*)q;
}

void _ns1__saveAgentRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__saveAgentRequest::agent = NULL;
	/* transient soap skipped */
}

void _ns1__saveAgentRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__agent(soap, &this->_ns1__saveAgentRequest::agent);
	/* transient soap skipped */
}

int _ns1__saveAgentRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__saveAgentRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__saveAgentRequest(struct soap *soap, const char *tag, int id, const _ns1__saveAgentRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__saveAgentRequest), type))
		return soap->error;
	if (a->_ns1__saveAgentRequest::agent)
	{	if (soap_out_PointerTo_ns1__agent(soap, "agent", -1, &a->_ns1__saveAgentRequest::agent, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "agent"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__saveAgentRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__saveAgentRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__saveAgentRequest * SOAP_FMAC4 soap_in__ns1__saveAgentRequest(struct soap *soap, const char *tag, _ns1__saveAgentRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__saveAgentRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__saveAgentRequest, sizeof(_ns1__saveAgentRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__saveAgentRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__saveAgentRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_agent1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_agent1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__agent(soap, "agent", &(a->_ns1__saveAgentRequest::agent), ""))
				{	soap_flag_agent1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__saveAgentRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__saveAgentRequest, 0, sizeof(_ns1__saveAgentRequest), 0, soap_copy__ns1__saveAgentRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_agent1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__saveAgentRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__saveAgentRequest);
	if (this->soap_out(soap, tag?tag:"ns1:saveAgentRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__saveAgentRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__saveAgentRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__saveAgentRequest * SOAP_FMAC4 soap_get__ns1__saveAgentRequest(struct soap *soap, _ns1__saveAgentRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__saveAgentRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__saveAgentRequest * SOAP_FMAC2 soap_instantiate__ns1__saveAgentRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__saveAgentRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__saveAgentRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveAgentRequest);
		if (size)
			*size = sizeof(_ns1__saveAgentRequest);
		((_ns1__saveAgentRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__saveAgentRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__saveAgentRequest);
		for (int i = 0; i < n; i++)
			((_ns1__saveAgentRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__saveAgentRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__saveAgentRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__saveAgentRequest %p -> %p\n", q, p));
	*(_ns1__saveAgentRequest*)p = *(_ns1__saveAgentRequest*)q;
}

void _ns1__point::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_double(soap, &this->_ns1__point::em);
	soap_default_double(soap, &this->_ns1__point::cost);
	/* transient soap skipped */
}

void _ns1__point::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__point::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__point(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__point(struct soap *soap, const char *tag, int id, const _ns1__point *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__point), type))
		return soap->error;
	if (soap_out_double(soap, "em", -1, &(a->_ns1__point::em), ""))
		return soap->error;
	if (soap_out_double(soap, "cost", -1, &(a->_ns1__point::cost), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__point::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__point(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__point * SOAP_FMAC4 soap_in__ns1__point(struct soap *soap, const char *tag, _ns1__point *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__point *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__point, sizeof(_ns1__point), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__point)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__point *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_em1 = 1;
	size_t soap_flag_cost1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_em1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "em", &(a->_ns1__point::em), "xsd:double"))
				{	soap_flag_em1--;
					continue;
				}
			if (soap_flag_cost1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "cost", &(a->_ns1__point::cost), "xsd:double"))
				{	soap_flag_cost1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__point *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__point, 0, sizeof(_ns1__point), 0, soap_copy__ns1__point);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_em1 > 0 || soap_flag_cost1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__point::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__point);
	if (this->soap_out(soap, tag?tag:"ns1:point", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__point::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__point(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__point * SOAP_FMAC4 soap_get__ns1__point(struct soap *soap, _ns1__point *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__point(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__point * SOAP_FMAC2 soap_instantiate__ns1__point(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__point(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__point, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__point);
		if (size)
			*size = sizeof(_ns1__point);
		((_ns1__point*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__point[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__point);
		for (int i = 0; i < n; i++)
			((_ns1__point*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__point*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__point(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__point %p -> %p\n", q, p));
	*(_ns1__point*)p = *(_ns1__point*)q;
}

void _ns1__func::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__func::type);
	soap_default_std__vectorTemplateOfPointerTo_ns1__point(soap, &this->_ns1__func::point);
	/* transient soap skipped */
}

void _ns1__func::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__func::type);
	soap_serialize_std__vectorTemplateOfPointerTo_ns1__point(soap, &this->_ns1__func::point);
	/* transient soap skipped */
}

int _ns1__func::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__func(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__func(struct soap *soap, const char *tag, int id, const _ns1__func *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__func), type))
		return soap->error;
	if (soap_out_std__string(soap, "type", -1, &(a->_ns1__func::type), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTo_ns1__point(soap, "point", -1, &(a->_ns1__func::point), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__func::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__func(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__func * SOAP_FMAC4 soap_in__ns1__func(struct soap *soap, const char *tag, _ns1__func *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__func *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__func, sizeof(_ns1__func), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__func)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__func *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_type1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_type1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "type", &(a->_ns1__func::type), "xsd:string"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTo_ns1__point(soap, "point", &(a->_ns1__func::point), ""))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__func *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__func, 0, sizeof(_ns1__func), 0, soap_copy__ns1__func);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_type1 > 0 || a->_ns1__func::point.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__func::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__func);
	if (this->soap_out(soap, tag?tag:"ns1:func", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__func::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__func(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__func * SOAP_FMAC4 soap_get__ns1__func(struct soap *soap, _ns1__func *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__func(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__func * SOAP_FMAC2 soap_instantiate__ns1__func(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__func(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__func, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__func);
		if (size)
			*size = sizeof(_ns1__func);
		((_ns1__func*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__func[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__func);
		for (int i = 0; i < n; i++)
			((_ns1__func*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__func*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__func(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__func %p -> %p\n", q, p));
	*(_ns1__func*)p = *(_ns1__func*)q;
}

void _ns1__party::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__party::idParty);
	soap_default_std__string(soap, &this->_ns1__party::name);
	soap_default_double(soap, &this->_ns1__party::uncertainty);
	soap_default_double(soap, &this->_ns1__party::minEm);
	soap_default_double(soap, &this->_ns1__party::baseEm);
	soap_default_double(soap, &this->_ns1__party::targetEm);
	this->_ns1__party::func = NULL;
	/* transient soap skipped */
}

void _ns1__party::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__party::name);
	soap_serialize_PointerTo_ns1__func(soap, &this->_ns1__party::func);
	/* transient soap skipped */
}

int _ns1__party::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__party(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__party(struct soap *soap, const char *tag, int id, const _ns1__party *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__party), type))
		return soap->error;
	if (soap_out_int(soap, "idParty", -1, &(a->_ns1__party::idParty), ""))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &(a->_ns1__party::name), ""))
		return soap->error;
	if (soap_out_double(soap, "uncertainty", -1, &(a->_ns1__party::uncertainty), ""))
		return soap->error;
	if (soap_out_double(soap, "minEm", -1, &(a->_ns1__party::minEm), ""))
		return soap->error;
	if (soap_out_double(soap, "baseEm", -1, &(a->_ns1__party::baseEm), ""))
		return soap->error;
	if (soap_out_double(soap, "targetEm", -1, &(a->_ns1__party::targetEm), ""))
		return soap->error;
	if (a->_ns1__party::func)
	{	if (soap_out_PointerTo_ns1__func(soap, "func", -1, &a->_ns1__party::func, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "func"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__party::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__party(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__party * SOAP_FMAC4 soap_in__ns1__party(struct soap *soap, const char *tag, _ns1__party *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__party *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__party, sizeof(_ns1__party), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__party)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__party *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_idParty1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_uncertainty1 = 1;
	size_t soap_flag_minEm1 = 1;
	size_t soap_flag_baseEm1 = 1;
	size_t soap_flag_targetEm1 = 1;
	size_t soap_flag_func1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_idParty1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "idParty", &(a->_ns1__party::idParty), "xsd:int"))
				{	soap_flag_idParty1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &(a->_ns1__party::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_uncertainty1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "uncertainty", &(a->_ns1__party::uncertainty), "xsd:double"))
				{	soap_flag_uncertainty1--;
					continue;
				}
			if (soap_flag_minEm1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "minEm", &(a->_ns1__party::minEm), "xsd:double"))
				{	soap_flag_minEm1--;
					continue;
				}
			if (soap_flag_baseEm1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "baseEm", &(a->_ns1__party::baseEm), "xsd:double"))
				{	soap_flag_baseEm1--;
					continue;
				}
			if (soap_flag_targetEm1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "targetEm", &(a->_ns1__party::targetEm), "xsd:double"))
				{	soap_flag_targetEm1--;
					continue;
				}
			if (soap_flag_func1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__func(soap, "func", &(a->_ns1__party::func), ""))
				{	soap_flag_func1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__party *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__party, 0, sizeof(_ns1__party), 0, soap_copy__ns1__party);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_idParty1 > 0 || soap_flag_name1 > 0 || soap_flag_uncertainty1 > 0 || soap_flag_minEm1 > 0 || soap_flag_baseEm1 > 0 || soap_flag_targetEm1 > 0 || soap_flag_func1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__party::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__party);
	if (this->soap_out(soap, tag?tag:"ns1:party", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__party::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__party(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__party * SOAP_FMAC4 soap_get__ns1__party(struct soap *soap, _ns1__party *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__party(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__party * SOAP_FMAC2 soap_instantiate__ns1__party(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__party(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__party, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__party);
		if (size)
			*size = sizeof(_ns1__party);
		((_ns1__party*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__party[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__party);
		for (int i = 0; i < n; i++)
			((_ns1__party*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__party*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__party(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__party %p -> %p\n", q, p));
	*(_ns1__party*)p = *(_ns1__party*)q;
}

void _ns1__market::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_ns1__market::idMarket);
	soap_default_std__string(soap, &this->_ns1__market::name);
	soap_default_int(soap, &this->_ns1__market::idSolver);
	soap_default_std__vectorTemplateOfPointerTo_ns1__party(soap, &this->_ns1__market::party);
	/* transient soap skipped */
}

void _ns1__market::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__market::name);
	soap_serialize_std__vectorTemplateOfPointerTo_ns1__party(soap, &this->_ns1__market::party);
	/* transient soap skipped */
}

int _ns1__market::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__market(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__market(struct soap *soap, const char *tag, int id, const _ns1__market *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__market), type))
		return soap->error;
	if (soap_out_LONG64(soap, "idMarket", -1, &(a->_ns1__market::idMarket), ""))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &(a->_ns1__market::name), ""))
		return soap->error;
	if (soap_out_int(soap, "idSolver", -1, &(a->_ns1__market::idSolver), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTo_ns1__party(soap, "party", -1, &(a->_ns1__market::party), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__market::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__market(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__market * SOAP_FMAC4 soap_in__ns1__market(struct soap *soap, const char *tag, _ns1__market *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__market *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__market, sizeof(_ns1__market), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__market)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__market *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_idMarket1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_idSolver1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_idMarket1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idMarket", &(a->_ns1__market::idMarket), "xsd:long"))
				{	soap_flag_idMarket1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &(a->_ns1__market::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_idSolver1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "idSolver", &(a->_ns1__market::idSolver), "xsd:int"))
				{	soap_flag_idSolver1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTo_ns1__party(soap, "party", &(a->_ns1__market::party), ""))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__market *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__market, 0, sizeof(_ns1__market), 0, soap_copy__ns1__market);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_idMarket1 > 0 || soap_flag_name1 > 0 || soap_flag_idSolver1 > 0 || a->_ns1__market::party.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__market::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__market);
	if (this->soap_out(soap, tag?tag:"ns1:market", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__market::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__market(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__market * SOAP_FMAC4 soap_get__ns1__market(struct soap *soap, _ns1__market *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__market(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__market * SOAP_FMAC2 soap_instantiate__ns1__market(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__market(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__market, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__market);
		if (size)
			*size = sizeof(_ns1__market);
		((_ns1__market*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__market[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__market);
		for (int i = 0; i < n; i++)
			((_ns1__market*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__market*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__market(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__market %p -> %p\n", q, p));
	*(_ns1__market*)p = *(_ns1__market*)q;
}

void _ns1__marketResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__marketResponse::market = NULL;
	/* transient soap skipped */
}

void _ns1__marketResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__market(soap, &this->_ns1__marketResponse::market);
	/* transient soap skipped */
}

int _ns1__marketResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__marketResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__marketResponse(struct soap *soap, const char *tag, int id, const _ns1__marketResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__marketResponse), type))
		return soap->error;
	if (a->_ns1__marketResponse::market)
	{	if (soap_out_PointerTo_ns1__market(soap, "market", -1, &a->_ns1__marketResponse::market, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "market"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__marketResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__marketResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__marketResponse * SOAP_FMAC4 soap_in__ns1__marketResponse(struct soap *soap, const char *tag, _ns1__marketResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__marketResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__marketResponse, sizeof(_ns1__marketResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__marketResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__marketResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_market1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_market1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__market(soap, "market", &(a->_ns1__marketResponse::market), ""))
				{	soap_flag_market1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__marketResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__marketResponse, 0, sizeof(_ns1__marketResponse), 0, soap_copy__ns1__marketResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_market1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__marketResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__marketResponse);
	if (this->soap_out(soap, tag?tag:"ns1:marketResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__marketResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__marketResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__marketResponse * SOAP_FMAC4 soap_get__ns1__marketResponse(struct soap *soap, _ns1__marketResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__marketResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__marketResponse * SOAP_FMAC2 soap_instantiate__ns1__marketResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__marketResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__marketResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__marketResponse);
		if (size)
			*size = sizeof(_ns1__marketResponse);
		((_ns1__marketResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__marketResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__marketResponse);
		for (int i = 0; i < n; i++)
			((_ns1__marketResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__marketResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__marketResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__marketResponse %p -> %p\n", q, p));
	*(_ns1__marketResponse*)p = *(_ns1__marketResponse*)q;
}

void _ns1__marketRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_ns1__marketRequest::idMarket);
	/* transient soap skipped */
}

void _ns1__marketRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__marketRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__marketRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__marketRequest(struct soap *soap, const char *tag, int id, const _ns1__marketRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__marketRequest), type))
		return soap->error;
	if (soap_out_LONG64(soap, "idMarket", -1, &(a->_ns1__marketRequest::idMarket), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__marketRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__marketRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__marketRequest * SOAP_FMAC4 soap_in__ns1__marketRequest(struct soap *soap, const char *tag, _ns1__marketRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__marketRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__marketRequest, sizeof(_ns1__marketRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__marketRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__marketRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_idMarket1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_idMarket1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "idMarket", &(a->_ns1__marketRequest::idMarket), "xsd:long"))
				{	soap_flag_idMarket1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__marketRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__marketRequest, 0, sizeof(_ns1__marketRequest), 0, soap_copy__ns1__marketRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_idMarket1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__marketRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__marketRequest);
	if (this->soap_out(soap, tag?tag:"ns1:marketRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__marketRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__marketRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__marketRequest * SOAP_FMAC4 soap_get__ns1__marketRequest(struct soap *soap, _ns1__marketRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__marketRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__marketRequest * SOAP_FMAC2 soap_instantiate__ns1__marketRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__marketRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__marketRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__marketRequest);
		if (size)
			*size = sizeof(_ns1__marketRequest);
		((_ns1__marketRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__marketRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__marketRequest);
		for (int i = 0; i < n; i++)
			((_ns1__marketRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__marketRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__marketRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__marketRequest %p -> %p\n", q, p));
	*(_ns1__marketRequest*)p = *(_ns1__marketRequest*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__date), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__date(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__date, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__date, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__date, 0, sizeof(std::string), 0, soap_copy_xsd__date);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__date);
	if (soap_out_xsd__date(soap, tag?tag:"xsd:date", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__date(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__date(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__market(struct soap *soap, struct __ns1__market *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__marketRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__market(struct soap *soap, const struct __ns1__market *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__marketRequest(soap, &a->ns1__marketRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__market(struct soap *soap, const char *tag, int id, const struct __ns1__market *a, const char *type)
{
	if (soap_out_PointerTo_ns1__marketRequest(soap, "ns1:marketRequest", -1, &a->ns1__marketRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__market * SOAP_FMAC4 soap_in___ns1__market(struct soap *soap, const char *tag, struct __ns1__market *a, const char *type)
{
	size_t soap_flag_ns1__marketRequest = 1;
	short soap_flag;
	a = (struct __ns1__market *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__market, sizeof(struct __ns1__market), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__market(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__marketRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__marketRequest(soap, "ns1:marketRequest", &a->ns1__marketRequest, ""))
				{	soap_flag_ns1__marketRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__market(struct soap *soap, const struct __ns1__market *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__market(soap, tag?tag:"-ns1:market", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__market * SOAP_FMAC4 soap_get___ns1__market(struct soap *soap, struct __ns1__market *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__market(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__market * SOAP_FMAC2 soap_instantiate___ns1__market(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__market(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__market, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__market);
		if (size)
			*size = sizeof(struct __ns1__market);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__market[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__market);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__market*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__market(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__market %p -> %p\n", q, p));
	*(struct __ns1__market*)p = *(struct __ns1__market*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__saveSolution(struct soap *soap, struct __ns1__saveSolution *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__saveSolutionRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__saveSolution(struct soap *soap, const struct __ns1__saveSolution *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__saveSolutionRequest(soap, &a->ns1__saveSolutionRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__saveSolution(struct soap *soap, const char *tag, int id, const struct __ns1__saveSolution *a, const char *type)
{
	if (soap_out_PointerTo_ns1__saveSolutionRequest(soap, "ns1:saveSolutionRequest", -1, &a->ns1__saveSolutionRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__saveSolution * SOAP_FMAC4 soap_in___ns1__saveSolution(struct soap *soap, const char *tag, struct __ns1__saveSolution *a, const char *type)
{
	size_t soap_flag_ns1__saveSolutionRequest = 1;
	short soap_flag;
	a = (struct __ns1__saveSolution *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__saveSolution, sizeof(struct __ns1__saveSolution), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__saveSolution(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__saveSolutionRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__saveSolutionRequest(soap, "ns1:saveSolutionRequest", &a->ns1__saveSolutionRequest, ""))
				{	soap_flag_ns1__saveSolutionRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__saveSolution(struct soap *soap, const struct __ns1__saveSolution *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__saveSolution(soap, tag?tag:"-ns1:saveSolution", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__saveSolution * SOAP_FMAC4 soap_get___ns1__saveSolution(struct soap *soap, struct __ns1__saveSolution *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__saveSolution(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__saveSolution * SOAP_FMAC2 soap_instantiate___ns1__saveSolution(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__saveSolution(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__saveSolution, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__saveSolution);
		if (size)
			*size = sizeof(struct __ns1__saveSolution);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__saveSolution[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__saveSolution);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__saveSolution*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__saveSolution(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__saveSolution %p -> %p\n", q, p));
	*(struct __ns1__saveSolution*)p = *(struct __ns1__saveSolution*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__saveSolutionResponse(struct soap *soap, struct __ns1__saveSolutionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->ns1__saveSolutionResponse);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__saveSolutionResponse(struct soap *soap, const struct __ns1__saveSolutionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->ns1__saveSolutionResponse);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__saveSolutionResponse(struct soap *soap, const char *tag, int id, const struct __ns1__saveSolutionResponse *a, const char *type)
{
	soap_element_result(soap, "ns1:saveSolutionResponse");
	if (soap_out_std__string(soap, "ns1:saveSolutionResponse", -1, &a->ns1__saveSolutionResponse, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__saveSolutionResponse * SOAP_FMAC4 soap_in___ns1__saveSolutionResponse(struct soap *soap, const char *tag, struct __ns1__saveSolutionResponse *a, const char *type)
{
	size_t soap_flag_ns1__saveSolutionResponse = 1;
	short soap_flag;
	a = (struct __ns1__saveSolutionResponse *)soap_class_id_enter(soap, "", a, SOAP_TYPE___ns1__saveSolutionResponse, sizeof(struct __ns1__saveSolutionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default___ns1__saveSolutionResponse(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__saveSolutionResponse && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:saveSolutionResponse", &a->ns1__saveSolutionResponse, "xsd:string"))
				{	soap_flag_ns1__saveSolutionResponse--;
					continue;
				}
			soap_check_result(soap, "ns1:saveSolutionResponse");
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ns1__saveSolutionResponse > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__saveSolutionResponse(struct soap *soap, const struct __ns1__saveSolutionResponse *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__saveSolutionResponse(soap, tag?tag:"-ns1:saveSolutionResponse", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__saveSolutionResponse * SOAP_FMAC4 soap_get___ns1__saveSolutionResponse(struct soap *soap, struct __ns1__saveSolutionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__saveSolutionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__saveSolutionResponse * SOAP_FMAC2 soap_instantiate___ns1__saveSolutionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__saveSolutionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__saveSolutionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__saveSolutionResponse);
		if (size)
			*size = sizeof(struct __ns1__saveSolutionResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__saveSolutionResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__saveSolutionResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__saveSolutionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__saveSolutionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__saveSolutionResponse %p -> %p\n", q, p));
	*(struct __ns1__saveSolutionResponse*)p = *(struct __ns1__saveSolutionResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__saveAgent(struct soap *soap, struct __ns1__saveAgent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__saveAgentRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__saveAgent(struct soap *soap, const struct __ns1__saveAgent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__saveAgentRequest(soap, &a->ns1__saveAgentRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__saveAgent(struct soap *soap, const char *tag, int id, const struct __ns1__saveAgent *a, const char *type)
{
	if (soap_out_PointerTo_ns1__saveAgentRequest(soap, "ns1:saveAgentRequest", -1, &a->ns1__saveAgentRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__saveAgent * SOAP_FMAC4 soap_in___ns1__saveAgent(struct soap *soap, const char *tag, struct __ns1__saveAgent *a, const char *type)
{
	size_t soap_flag_ns1__saveAgentRequest = 1;
	short soap_flag;
	a = (struct __ns1__saveAgent *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__saveAgent, sizeof(struct __ns1__saveAgent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__saveAgent(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__saveAgentRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__saveAgentRequest(soap, "ns1:saveAgentRequest", &a->ns1__saveAgentRequest, ""))
				{	soap_flag_ns1__saveAgentRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__saveAgent(struct soap *soap, const struct __ns1__saveAgent *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__saveAgent(soap, tag?tag:"-ns1:saveAgent", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__saveAgent * SOAP_FMAC4 soap_get___ns1__saveAgent(struct soap *soap, struct __ns1__saveAgent *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__saveAgent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__saveAgent * SOAP_FMAC2 soap_instantiate___ns1__saveAgent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__saveAgent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__saveAgent, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__saveAgent);
		if (size)
			*size = sizeof(struct __ns1__saveAgent);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__saveAgent[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__saveAgent);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__saveAgent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__saveAgent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__saveAgent %p -> %p\n", q, p));
	*(struct __ns1__saveAgent*)p = *(struct __ns1__saveAgent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__saveBid(struct soap *soap, struct __ns1__saveBid *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__saveBidRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__saveBid(struct soap *soap, const struct __ns1__saveBid *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__saveBidRequest(soap, &a->ns1__saveBidRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__saveBid(struct soap *soap, const char *tag, int id, const struct __ns1__saveBid *a, const char *type)
{
	if (soap_out_PointerTo_ns1__saveBidRequest(soap, "ns1:saveBidRequest", -1, &a->ns1__saveBidRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__saveBid * SOAP_FMAC4 soap_in___ns1__saveBid(struct soap *soap, const char *tag, struct __ns1__saveBid *a, const char *type)
{
	size_t soap_flag_ns1__saveBidRequest = 1;
	short soap_flag;
	a = (struct __ns1__saveBid *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__saveBid, sizeof(struct __ns1__saveBid), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__saveBid(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__saveBidRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__saveBidRequest(soap, "ns1:saveBidRequest", &a->ns1__saveBidRequest, ""))
				{	soap_flag_ns1__saveBidRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__saveBid(struct soap *soap, const struct __ns1__saveBid *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__saveBid(soap, tag?tag:"-ns1:saveBid", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__saveBid * SOAP_FMAC4 soap_get___ns1__saveBid(struct soap *soap, struct __ns1__saveBid *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__saveBid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__saveBid * SOAP_FMAC2 soap_instantiate___ns1__saveBid(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__saveBid(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__saveBid, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__saveBid);
		if (size)
			*size = sizeof(struct __ns1__saveBid);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__saveBid[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__saveBid);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__saveBid*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__saveBid(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__saveBid %p -> %p\n", q, p));
	*(struct __ns1__saveBid*)p = *(struct __ns1__saveBid*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__saveAuction(struct soap *soap, struct __ns1__saveAuction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__saveAuctionRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__saveAuction(struct soap *soap, const struct __ns1__saveAuction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__saveAuctionRequest(soap, &a->ns1__saveAuctionRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__saveAuction(struct soap *soap, const char *tag, int id, const struct __ns1__saveAuction *a, const char *type)
{
	if (soap_out_PointerTo_ns1__saveAuctionRequest(soap, "ns1:saveAuctionRequest", -1, &a->ns1__saveAuctionRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__saveAuction * SOAP_FMAC4 soap_in___ns1__saveAuction(struct soap *soap, const char *tag, struct __ns1__saveAuction *a, const char *type)
{
	size_t soap_flag_ns1__saveAuctionRequest = 1;
	short soap_flag;
	a = (struct __ns1__saveAuction *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__saveAuction, sizeof(struct __ns1__saveAuction), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__saveAuction(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__saveAuctionRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__saveAuctionRequest(soap, "ns1:saveAuctionRequest", &a->ns1__saveAuctionRequest, ""))
				{	soap_flag_ns1__saveAuctionRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__saveAuction(struct soap *soap, const struct __ns1__saveAuction *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__saveAuction(soap, tag?tag:"-ns1:saveAuction", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__saveAuction * SOAP_FMAC4 soap_get___ns1__saveAuction(struct soap *soap, struct __ns1__saveAuction *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__saveAuction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__saveAuction * SOAP_FMAC2 soap_instantiate___ns1__saveAuction(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__saveAuction(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__saveAuction, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__saveAuction);
		if (size)
			*size = sizeof(struct __ns1__saveAuction);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__saveAuction[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__saveAuction);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__saveAuction*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__saveAuction(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__saveAuction %p -> %p\n", q, p));
	*(struct __ns1__saveAuction*)p = *(struct __ns1__saveAuction*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__marketResponse(struct soap *soap, _ns1__marketResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__marketResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__marketResponse(struct soap *soap, const char *tag, int id, _ns1__marketResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__marketResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__marketResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__marketResponse(struct soap *soap, const char *tag, _ns1__marketResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__marketResponse **)soap_malloc(soap, sizeof(_ns1__marketResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__marketResponse *)soap_instantiate__ns1__marketResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__marketResponse ** p = (_ns1__marketResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__marketResponse, sizeof(_ns1__marketResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__marketResponse(struct soap *soap, _ns1__marketResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__marketResponse);
	if (soap_out_PointerTo_ns1__marketResponse(soap, tag?tag:"ns1:marketResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__marketResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__marketResponse(struct soap *soap, _ns1__marketResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__marketResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__marketRequest(struct soap *soap, _ns1__marketRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__marketRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__marketRequest(struct soap *soap, const char *tag, int id, _ns1__marketRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__marketRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__marketRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__marketRequest(struct soap *soap, const char *tag, _ns1__marketRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__marketRequest **)soap_malloc(soap, sizeof(_ns1__marketRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__marketRequest *)soap_instantiate__ns1__marketRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__marketRequest ** p = (_ns1__marketRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__marketRequest, sizeof(_ns1__marketRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__marketRequest(struct soap *soap, _ns1__marketRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__marketRequest);
	if (soap_out_PointerTo_ns1__marketRequest(soap, tag?tag:"ns1:marketRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__marketRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__marketRequest(struct soap *soap, _ns1__marketRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__marketRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__saveSolutionRequest(struct soap *soap, _ns1__saveSolutionRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__saveSolutionRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__saveSolutionRequest(struct soap *soap, const char *tag, int id, _ns1__saveSolutionRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__saveSolutionRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__saveSolutionRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__saveSolutionRequest(struct soap *soap, const char *tag, _ns1__saveSolutionRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__saveSolutionRequest **)soap_malloc(soap, sizeof(_ns1__saveSolutionRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__saveSolutionRequest *)soap_instantiate__ns1__saveSolutionRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__saveSolutionRequest ** p = (_ns1__saveSolutionRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__saveSolutionRequest, sizeof(_ns1__saveSolutionRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__saveSolutionRequest(struct soap *soap, _ns1__saveSolutionRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__saveSolutionRequest);
	if (soap_out_PointerTo_ns1__saveSolutionRequest(soap, tag?tag:"ns1:saveSolutionRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__saveSolutionRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__saveSolutionRequest(struct soap *soap, _ns1__saveSolutionRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__saveSolutionRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__saveAgentResponse(struct soap *soap, _ns1__saveAgentResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__saveAgentResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__saveAgentResponse(struct soap *soap, const char *tag, int id, _ns1__saveAgentResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__saveAgentResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__saveAgentResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__saveAgentResponse(struct soap *soap, const char *tag, _ns1__saveAgentResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__saveAgentResponse **)soap_malloc(soap, sizeof(_ns1__saveAgentResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__saveAgentResponse *)soap_instantiate__ns1__saveAgentResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__saveAgentResponse ** p = (_ns1__saveAgentResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__saveAgentResponse, sizeof(_ns1__saveAgentResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__saveAgentResponse(struct soap *soap, _ns1__saveAgentResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__saveAgentResponse);
	if (soap_out_PointerTo_ns1__saveAgentResponse(soap, tag?tag:"ns1:saveAgentResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__saveAgentResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__saveAgentResponse(struct soap *soap, _ns1__saveAgentResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__saveAgentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__saveAgentRequest(struct soap *soap, _ns1__saveAgentRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__saveAgentRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__saveAgentRequest(struct soap *soap, const char *tag, int id, _ns1__saveAgentRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__saveAgentRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__saveAgentRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__saveAgentRequest(struct soap *soap, const char *tag, _ns1__saveAgentRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__saveAgentRequest **)soap_malloc(soap, sizeof(_ns1__saveAgentRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__saveAgentRequest *)soap_instantiate__ns1__saveAgentRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__saveAgentRequest ** p = (_ns1__saveAgentRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__saveAgentRequest, sizeof(_ns1__saveAgentRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__saveAgentRequest(struct soap *soap, _ns1__saveAgentRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__saveAgentRequest);
	if (soap_out_PointerTo_ns1__saveAgentRequest(soap, tag?tag:"ns1:saveAgentRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__saveAgentRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__saveAgentRequest(struct soap *soap, _ns1__saveAgentRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__saveAgentRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__saveBidResponse(struct soap *soap, _ns1__saveBidResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__saveBidResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__saveBidResponse(struct soap *soap, const char *tag, int id, _ns1__saveBidResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__saveBidResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__saveBidResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__saveBidResponse(struct soap *soap, const char *tag, _ns1__saveBidResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__saveBidResponse **)soap_malloc(soap, sizeof(_ns1__saveBidResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__saveBidResponse *)soap_instantiate__ns1__saveBidResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__saveBidResponse ** p = (_ns1__saveBidResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__saveBidResponse, sizeof(_ns1__saveBidResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__saveBidResponse(struct soap *soap, _ns1__saveBidResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__saveBidResponse);
	if (soap_out_PointerTo_ns1__saveBidResponse(soap, tag?tag:"ns1:saveBidResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__saveBidResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__saveBidResponse(struct soap *soap, _ns1__saveBidResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__saveBidResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__saveBidRequest(struct soap *soap, _ns1__saveBidRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__saveBidRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__saveBidRequest(struct soap *soap, const char *tag, int id, _ns1__saveBidRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__saveBidRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__saveBidRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__saveBidRequest(struct soap *soap, const char *tag, _ns1__saveBidRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__saveBidRequest **)soap_malloc(soap, sizeof(_ns1__saveBidRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__saveBidRequest *)soap_instantiate__ns1__saveBidRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__saveBidRequest ** p = (_ns1__saveBidRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__saveBidRequest, sizeof(_ns1__saveBidRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__saveBidRequest(struct soap *soap, _ns1__saveBidRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__saveBidRequest);
	if (soap_out_PointerTo_ns1__saveBidRequest(soap, tag?tag:"ns1:saveBidRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__saveBidRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__saveBidRequest(struct soap *soap, _ns1__saveBidRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__saveBidRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__saveAuctionResponse(struct soap *soap, _ns1__saveAuctionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__saveAuctionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__saveAuctionResponse(struct soap *soap, const char *tag, int id, _ns1__saveAuctionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__saveAuctionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__saveAuctionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__saveAuctionResponse(struct soap *soap, const char *tag, _ns1__saveAuctionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__saveAuctionResponse **)soap_malloc(soap, sizeof(_ns1__saveAuctionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__saveAuctionResponse *)soap_instantiate__ns1__saveAuctionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__saveAuctionResponse ** p = (_ns1__saveAuctionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__saveAuctionResponse, sizeof(_ns1__saveAuctionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__saveAuctionResponse(struct soap *soap, _ns1__saveAuctionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__saveAuctionResponse);
	if (soap_out_PointerTo_ns1__saveAuctionResponse(soap, tag?tag:"ns1:saveAuctionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__saveAuctionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__saveAuctionResponse(struct soap *soap, _ns1__saveAuctionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__saveAuctionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__saveAuctionRequest(struct soap *soap, _ns1__saveAuctionRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__saveAuctionRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__saveAuctionRequest(struct soap *soap, const char *tag, int id, _ns1__saveAuctionRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__saveAuctionRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__saveAuctionRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__saveAuctionRequest(struct soap *soap, const char *tag, _ns1__saveAuctionRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__saveAuctionRequest **)soap_malloc(soap, sizeof(_ns1__saveAuctionRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__saveAuctionRequest *)soap_instantiate__ns1__saveAuctionRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__saveAuctionRequest ** p = (_ns1__saveAuctionRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__saveAuctionRequest, sizeof(_ns1__saveAuctionRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__saveAuctionRequest(struct soap *soap, _ns1__saveAuctionRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__saveAuctionRequest);
	if (soap_out_PointerTo_ns1__saveAuctionRequest(soap, tag?tag:"ns1:saveAuctionRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__saveAuctionRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__saveAuctionRequest(struct soap *soap, _ns1__saveAuctionRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__saveAuctionRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__solution(struct soap *soap, _ns1__solution *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__solution))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__solution(struct soap *soap, const char *tag, int id, _ns1__solution *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__solution);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__solution ** SOAP_FMAC4 soap_in_PointerTo_ns1__solution(struct soap *soap, const char *tag, _ns1__solution **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__solution **)soap_malloc(soap, sizeof(_ns1__solution *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__solution *)soap_instantiate__ns1__solution(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__solution ** p = (_ns1__solution **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__solution, sizeof(_ns1__solution), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__solution(struct soap *soap, _ns1__solution *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__solution);
	if (soap_out_PointerTo_ns1__solution(soap, tag?tag:"ns1:solution", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__solution ** SOAP_FMAC4 soap_get_PointerTo_ns1__solution(struct soap *soap, _ns1__solution **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__solution(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__msg(struct soap *soap, _ns1__msg *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__msg))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__msg(struct soap *soap, const char *tag, int id, _ns1__msg *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__msg);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__msg ** SOAP_FMAC4 soap_in_PointerTo_ns1__msg(struct soap *soap, const char *tag, _ns1__msg **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__msg **)soap_malloc(soap, sizeof(_ns1__msg *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__msg *)soap_instantiate__ns1__msg(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__msg ** p = (_ns1__msg **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__msg, sizeof(_ns1__msg), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__msg(struct soap *soap, _ns1__msg *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__msg);
	if (soap_out_PointerTo_ns1__msg(soap, tag?tag:"ns1:msg", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__msg ** SOAP_FMAC4 soap_get_PointerTo_ns1__msg(struct soap *soap, _ns1__msg **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__msg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__partySolution(struct soap *soap, _ns1__partySolution *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__partySolution))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__partySolution(struct soap *soap, const char *tag, int id, _ns1__partySolution *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__partySolution);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__partySolution ** SOAP_FMAC4 soap_in_PointerTo_ns1__partySolution(struct soap *soap, const char *tag, _ns1__partySolution **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__partySolution **)soap_malloc(soap, sizeof(_ns1__partySolution *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__partySolution *)soap_instantiate__ns1__partySolution(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__partySolution ** p = (_ns1__partySolution **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__partySolution, sizeof(_ns1__partySolution), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__partySolution(struct soap *soap, _ns1__partySolution *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__partySolution);
	if (soap_out_PointerTo_ns1__partySolution(soap, tag?tag:"ns1:partySolution", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__partySolution ** SOAP_FMAC4 soap_get_PointerTo_ns1__partySolution(struct soap *soap, _ns1__partySolution **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__partySolution(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__marketSolution(struct soap *soap, _ns1__marketSolution *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__marketSolution))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__marketSolution(struct soap *soap, const char *tag, int id, _ns1__marketSolution *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__marketSolution);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__marketSolution ** SOAP_FMAC4 soap_in_PointerTo_ns1__marketSolution(struct soap *soap, const char *tag, _ns1__marketSolution **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__marketSolution **)soap_malloc(soap, sizeof(_ns1__marketSolution *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__marketSolution *)soap_instantiate__ns1__marketSolution(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__marketSolution ** p = (_ns1__marketSolution **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__marketSolution, sizeof(_ns1__marketSolution), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__marketSolution(struct soap *soap, _ns1__marketSolution *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__marketSolution);
	if (soap_out_PointerTo_ns1__marketSolution(soap, tag?tag:"ns1:marketSolution", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__marketSolution ** SOAP_FMAC4 soap_get_PointerTo_ns1__marketSolution(struct soap *soap, _ns1__marketSolution **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__marketSolution(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__bid(struct soap *soap, _ns1__bid *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__bid))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__bid(struct soap *soap, const char *tag, int id, _ns1__bid *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__bid);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__bid ** SOAP_FMAC4 soap_in_PointerTo_ns1__bid(struct soap *soap, const char *tag, _ns1__bid **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__bid **)soap_malloc(soap, sizeof(_ns1__bid *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__bid *)soap_instantiate__ns1__bid(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__bid ** p = (_ns1__bid **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__bid, sizeof(_ns1__bid), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__bid(struct soap *soap, _ns1__bid *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__bid);
	if (soap_out_PointerTo_ns1__bid(soap, tag?tag:"ns1:bid", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__bid ** SOAP_FMAC4 soap_get_PointerTo_ns1__bid(struct soap *soap, _ns1__bid **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__bid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__auction(struct soap *soap, _ns1__auction *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__auction))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__auction(struct soap *soap, const char *tag, int id, _ns1__auction *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__auction);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__auction ** SOAP_FMAC4 soap_in_PointerTo_ns1__auction(struct soap *soap, const char *tag, _ns1__auction **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__auction **)soap_malloc(soap, sizeof(_ns1__auction *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__auction *)soap_instantiate__ns1__auction(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__auction ** p = (_ns1__auction **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__auction, sizeof(_ns1__auction), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__auction(struct soap *soap, _ns1__auction *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__auction);
	if (soap_out_PointerTo_ns1__auction(soap, tag?tag:"ns1:auction", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__auction ** SOAP_FMAC4 soap_get_PointerTo_ns1__auction(struct soap *soap, _ns1__auction **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__auction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__agent(struct soap *soap, _ns1__agent *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__agent))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__agent(struct soap *soap, const char *tag, int id, _ns1__agent *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__agent);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__agent ** SOAP_FMAC4 soap_in_PointerTo_ns1__agent(struct soap *soap, const char *tag, _ns1__agent **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__agent **)soap_malloc(soap, sizeof(_ns1__agent *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__agent *)soap_instantiate__ns1__agent(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__agent ** p = (_ns1__agent **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__agent, sizeof(_ns1__agent), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__agent(struct soap *soap, _ns1__agent *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__agent);
	if (soap_out_PointerTo_ns1__agent(soap, tag?tag:"ns1:agent", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__agent ** SOAP_FMAC4 soap_get_PointerTo_ns1__agent(struct soap *soap, _ns1__agent **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__agent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__point(struct soap *soap, _ns1__point *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__point))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__point(struct soap *soap, const char *tag, int id, _ns1__point *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__point);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__point ** SOAP_FMAC4 soap_in_PointerTo_ns1__point(struct soap *soap, const char *tag, _ns1__point **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__point **)soap_malloc(soap, sizeof(_ns1__point *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__point *)soap_instantiate__ns1__point(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__point ** p = (_ns1__point **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__point, sizeof(_ns1__point), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__point(struct soap *soap, _ns1__point *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__point);
	if (soap_out_PointerTo_ns1__point(soap, tag?tag:"ns1:point", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__point ** SOAP_FMAC4 soap_get_PointerTo_ns1__point(struct soap *soap, _ns1__point **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__point(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__func(struct soap *soap, _ns1__func *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__func))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__func(struct soap *soap, const char *tag, int id, _ns1__func *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__func);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__func ** SOAP_FMAC4 soap_in_PointerTo_ns1__func(struct soap *soap, const char *tag, _ns1__func **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__func **)soap_malloc(soap, sizeof(_ns1__func *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__func *)soap_instantiate__ns1__func(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__func ** p = (_ns1__func **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__func, sizeof(_ns1__func), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__func(struct soap *soap, _ns1__func *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__func);
	if (soap_out_PointerTo_ns1__func(soap, tag?tag:"ns1:func", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__func ** SOAP_FMAC4 soap_get_PointerTo_ns1__func(struct soap *soap, _ns1__func **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__func(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__party(struct soap *soap, _ns1__party *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__party))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__party(struct soap *soap, const char *tag, int id, _ns1__party *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__party);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__party ** SOAP_FMAC4 soap_in_PointerTo_ns1__party(struct soap *soap, const char *tag, _ns1__party **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__party **)soap_malloc(soap, sizeof(_ns1__party *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__party *)soap_instantiate__ns1__party(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__party ** p = (_ns1__party **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__party, sizeof(_ns1__party), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__party(struct soap *soap, _ns1__party *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__party);
	if (soap_out_PointerTo_ns1__party(soap, tag?tag:"ns1:party", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__party ** SOAP_FMAC4 soap_get_PointerTo_ns1__party(struct soap *soap, _ns1__party **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__party(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__market(struct soap *soap, _ns1__market *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__market))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__market(struct soap *soap, const char *tag, int id, _ns1__market *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__market);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__market ** SOAP_FMAC4 soap_in_PointerTo_ns1__market(struct soap *soap, const char *tag, _ns1__market **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__market **)soap_malloc(soap, sizeof(_ns1__market *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__market *)soap_instantiate__ns1__market(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__market ** p = (_ns1__market **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__market, sizeof(_ns1__market), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__market(struct soap *soap, _ns1__market *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__market);
	if (soap_out_PointerTo_ns1__market(soap, tag?tag:"ns1:market", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__market ** SOAP_FMAC4 soap_get_PointerTo_ns1__market(struct soap *soap, _ns1__market **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__market(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_ns1__msg(struct soap *soap, std::vector<_ns1__msg * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_ns1__msg(struct soap *soap, const std::vector<_ns1__msg * >*a)
{
	for (std::vector<_ns1__msg * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTo_ns1__msg(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_ns1__msg(struct soap *soap, const char *tag, int id, const std::vector<_ns1__msg * >*a, const char *type)
{
	for (std::vector<_ns1__msg * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTo_ns1__msg(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns1__msg * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_ns1__msg(struct soap *soap, const char *tag, std::vector<_ns1__msg * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTo_ns1__msg(soap, -1)))
		return NULL;
	_ns1__msg *n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns1__msg, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__msg, sizeof(_ns1__msg), 1))
				break;
			if (!soap_in_PointerTo_ns1__msg(soap, tag, NULL, ""))
				break;
		}
		else
		{
			if (!soap_in_PointerTo_ns1__msg(soap, tag, &n, ""))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns1__msg * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_ns1__msg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTo_ns1__msg(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__msg, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<_ns1__msg * >);
		if (size)
			*size = sizeof(std::vector<_ns1__msg * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<_ns1__msg * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<_ns1__msg * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<_ns1__msg * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTo_ns1__msg(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns1__msg * > %p -> %p\n", q, p));
	*(std::vector<_ns1__msg * >*)p = *(std::vector<_ns1__msg * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_ns1__partySolution(struct soap *soap, std::vector<_ns1__partySolution * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_ns1__partySolution(struct soap *soap, const std::vector<_ns1__partySolution * >*a)
{
	for (std::vector<_ns1__partySolution * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTo_ns1__partySolution(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_ns1__partySolution(struct soap *soap, const char *tag, int id, const std::vector<_ns1__partySolution * >*a, const char *type)
{
	for (std::vector<_ns1__partySolution * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTo_ns1__partySolution(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns1__partySolution * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_ns1__partySolution(struct soap *soap, const char *tag, std::vector<_ns1__partySolution * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTo_ns1__partySolution(soap, -1)))
		return NULL;
	_ns1__partySolution *n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns1__partySolution, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__partySolution, sizeof(_ns1__partySolution), 1))
				break;
			if (!soap_in_PointerTo_ns1__partySolution(soap, tag, NULL, ""))
				break;
		}
		else
		{
			if (!soap_in_PointerTo_ns1__partySolution(soap, tag, &n, ""))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns1__partySolution * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_ns1__partySolution(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTo_ns1__partySolution(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__partySolution, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<_ns1__partySolution * >);
		if (size)
			*size = sizeof(std::vector<_ns1__partySolution * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<_ns1__partySolution * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<_ns1__partySolution * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<_ns1__partySolution * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTo_ns1__partySolution(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns1__partySolution * > %p -> %p\n", q, p));
	*(std::vector<_ns1__partySolution * >*)p = *(std::vector<_ns1__partySolution * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_ns1__point(struct soap *soap, std::vector<_ns1__point * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_ns1__point(struct soap *soap, const std::vector<_ns1__point * >*a)
{
	for (std::vector<_ns1__point * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTo_ns1__point(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_ns1__point(struct soap *soap, const char *tag, int id, const std::vector<_ns1__point * >*a, const char *type)
{
	for (std::vector<_ns1__point * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTo_ns1__point(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns1__point * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_ns1__point(struct soap *soap, const char *tag, std::vector<_ns1__point * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTo_ns1__point(soap, -1)))
		return NULL;
	_ns1__point *n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns1__point, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__point, sizeof(_ns1__point), 1))
				break;
			if (!soap_in_PointerTo_ns1__point(soap, tag, NULL, ""))
				break;
		}
		else
		{
			if (!soap_in_PointerTo_ns1__point(soap, tag, &n, ""))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns1__point * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_ns1__point(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTo_ns1__point(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__point, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<_ns1__point * >);
		if (size)
			*size = sizeof(std::vector<_ns1__point * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<_ns1__point * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<_ns1__point * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<_ns1__point * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTo_ns1__point(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns1__point * > %p -> %p\n", q, p));
	*(std::vector<_ns1__point * >*)p = *(std::vector<_ns1__point * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_ns1__party(struct soap *soap, std::vector<_ns1__party * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_ns1__party(struct soap *soap, const std::vector<_ns1__party * >*a)
{
	for (std::vector<_ns1__party * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTo_ns1__party(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_ns1__party(struct soap *soap, const char *tag, int id, const std::vector<_ns1__party * >*a, const char *type)
{
	for (std::vector<_ns1__party * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTo_ns1__party(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns1__party * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_ns1__party(struct soap *soap, const char *tag, std::vector<_ns1__party * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTo_ns1__party(soap, -1)))
		return NULL;
	_ns1__party *n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns1__party, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__party, sizeof(_ns1__party), 1))
				break;
			if (!soap_in_PointerTo_ns1__party(soap, tag, NULL, ""))
				break;
		}
		else
		{
			if (!soap_in_PointerTo_ns1__party(soap, tag, &n, ""))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns1__party * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_ns1__party(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTo_ns1__party(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns1__party, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<_ns1__party * >);
		if (size)
			*size = sizeof(std::vector<_ns1__party * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<_ns1__party * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<_ns1__party * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<_ns1__party * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTo_ns1__party(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns1__party * > %p -> %p\n", q, p));
	*(std::vector<_ns1__party * >*)p = *(std::vector<_ns1__party * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
