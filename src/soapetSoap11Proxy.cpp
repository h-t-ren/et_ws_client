/* soapetSoap11Proxy.cpp
   Generated by gSOAP 2.8.3 from et.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapetSoap11Proxy.h"

etSoap11Proxy::etSoap11Proxy()
{	etSoap11Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

etSoap11Proxy::etSoap11Proxy(const struct soap &_soap) : soap(_soap)
{ }

etSoap11Proxy::etSoap11Proxy(const char *url)
{	etSoap11Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

etSoap11Proxy::etSoap11Proxy(soap_mode iomode)
{	etSoap11Proxy_init(iomode, iomode);
}

etSoap11Proxy::etSoap11Proxy(const char *url, soap_mode iomode)
{	etSoap11Proxy_init(iomode, iomode);
	soap_endpoint = url;
}

etSoap11Proxy::etSoap11Proxy(soap_mode imode, soap_mode omode)
{	etSoap11Proxy_init(imode, omode);
}

etSoap11Proxy::~etSoap11Proxy()
{ }

void etSoap11Proxy::etSoap11Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://www.ime.iiasa.ac.at/et/schemas", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void etSoap11Proxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void etSoap11Proxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *etSoap11Proxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *etSoap11Proxy::soap_fault()
{	return this->fault;
}

const char *etSoap11Proxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *etSoap11Proxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int etSoap11Proxy::soap_close_socket()
{	return soap_closesock(this);
}

void etSoap11Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void etSoap11Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *etSoap11Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int etSoap11Proxy::saveAuction(const char *endpoint, const char *soap_action, _ns1__saveAuctionRequest *ns1__saveAuctionRequest, _ns1__saveAuctionResponse *ns1__saveAuctionResponse)
{	struct soap *soap = this;
	struct __ns1__saveAuction soap_tmp___ns1__saveAuction;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://oder:8084/et_ws/et/";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__saveAuction.ns1__saveAuctionRequest = ns1__saveAuctionRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__saveAuction(soap, &soap_tmp___ns1__saveAuction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__saveAuction(soap, &soap_tmp___ns1__saveAuction, "-ns1:saveAuction", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__saveAuction(soap, &soap_tmp___ns1__saveAuction, "-ns1:saveAuction", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__saveAuctionResponse)
		return soap_closesock(soap);
	ns1__saveAuctionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__saveAuctionResponse->soap_get(soap, "ns1:saveAuctionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int etSoap11Proxy::saveBid(const char *endpoint, const char *soap_action, _ns1__saveBidRequest *ns1__saveBidRequest, _ns1__saveBidResponse *ns1__saveBidResponse)
{	struct soap *soap = this;
	struct __ns1__saveBid soap_tmp___ns1__saveBid;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://oder:8084/et_ws/et/";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__saveBid.ns1__saveBidRequest = ns1__saveBidRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__saveBid(soap, &soap_tmp___ns1__saveBid);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__saveBid(soap, &soap_tmp___ns1__saveBid, "-ns1:saveBid", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__saveBid(soap, &soap_tmp___ns1__saveBid, "-ns1:saveBid", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__saveBidResponse)
		return soap_closesock(soap);
	ns1__saveBidResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__saveBidResponse->soap_get(soap, "ns1:saveBidResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int etSoap11Proxy::saveAgent(const char *endpoint, const char *soap_action, _ns1__saveAgentRequest *ns1__saveAgentRequest, _ns1__saveAgentResponse *ns1__saveAgentResponse)
{	struct soap *soap = this;
	struct __ns1__saveAgent soap_tmp___ns1__saveAgent;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://oder:8084/et_ws/et/";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__saveAgent.ns1__saveAgentRequest = ns1__saveAgentRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__saveAgent(soap, &soap_tmp___ns1__saveAgent);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__saveAgent(soap, &soap_tmp___ns1__saveAgent, "-ns1:saveAgent", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__saveAgent(soap, &soap_tmp___ns1__saveAgent, "-ns1:saveAgent", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__saveAgentResponse)
		return soap_closesock(soap);
	ns1__saveAgentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__saveAgentResponse->soap_get(soap, "ns1:saveAgentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int etSoap11Proxy::saveSolution(const char *endpoint, const char *soap_action, _ns1__saveSolutionRequest *ns1__saveSolutionRequest, std::string &ns1__saveSolutionResponse)
{	struct soap *soap = this;
	struct __ns1__saveSolution soap_tmp___ns1__saveSolution;
	struct __ns1__saveSolutionResponse *soap_tmp___ns1__saveSolutionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://oder:8084/et_ws/et/";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__saveSolution.ns1__saveSolutionRequest = ns1__saveSolutionRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__saveSolution(soap, &soap_tmp___ns1__saveSolution);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__saveSolution(soap, &soap_tmp___ns1__saveSolution, "-ns1:saveSolution", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__saveSolution(soap, &soap_tmp___ns1__saveSolution, "-ns1:saveSolution", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__saveSolutionResponse)
		return soap_closesock(soap);
	soap_default_std__string(soap, &ns1__saveSolutionResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__saveSolutionResponse = soap_get___ns1__saveSolutionResponse(soap, NULL, "-ns1:saveSolutionResponse", "xsd:string");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ns1__saveSolutionResponse = soap_tmp___ns1__saveSolutionResponse->ns1__saveSolutionResponse;
	return soap_closesock(soap);
}

int etSoap11Proxy::market(const char *endpoint, const char *soap_action, _ns1__marketRequest *ns1__marketRequest, _ns1__marketResponse *ns1__marketResponse)
{	struct soap *soap = this;
	struct __ns1__market soap_tmp___ns1__market;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://oder:8084/et_ws/et/";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__market.ns1__marketRequest = ns1__marketRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__market(soap, &soap_tmp___ns1__market);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__market(soap, &soap_tmp___ns1__market, "-ns1:market", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__market(soap, &soap_tmp___ns1__market, "-ns1:market", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__marketResponse)
		return soap_closesock(soap);
	ns1__marketResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__marketResponse->soap_get(soap, "ns1:marketResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
