/* soapetSoap11Proxy.h
   Generated by gSOAP 2.8.3 from et.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapetSoap11Proxy_H
#define soapetSoap11Proxy_H
#include "soapH.h"

class SOAP_CMAC etSoap11Proxy : public soap
{ public:
	/// Endpoint URL of service 'etSoap11Proxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	etSoap11Proxy();
	/// Constructor with copy of another engine state
	etSoap11Proxy(const struct soap&);
	/// Constructor with endpoint URL
	etSoap11Proxy(const char *url);
	/// Constructor with engine input+output mode control
	etSoap11Proxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	etSoap11Proxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	etSoap11Proxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~etSoap11Proxy();
	/// Initializer used by constructors
	virtual	void etSoap11Proxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'saveAuction' (returns error code or SOAP_OK)
	virtual	int saveAuction(_ns1__saveAuctionRequest *ns1__saveAuctionRequest, _ns1__saveAuctionResponse *ns1__saveAuctionResponse) { return saveAuction(NULL, NULL, ns1__saveAuctionRequest, ns1__saveAuctionResponse); }
	virtual	int saveAuction(const char *endpoint, const char *soap_action, _ns1__saveAuctionRequest *ns1__saveAuctionRequest, _ns1__saveAuctionResponse *ns1__saveAuctionResponse);

	/// Web service operation 'saveBid' (returns error code or SOAP_OK)
	virtual	int saveBid(_ns1__saveBidRequest *ns1__saveBidRequest, _ns1__saveBidResponse *ns1__saveBidResponse) { return saveBid(NULL, NULL, ns1__saveBidRequest, ns1__saveBidResponse); }
	virtual	int saveBid(const char *endpoint, const char *soap_action, _ns1__saveBidRequest *ns1__saveBidRequest, _ns1__saveBidResponse *ns1__saveBidResponse);

	/// Web service operation 'saveAgent' (returns error code or SOAP_OK)
	virtual	int saveAgent(_ns1__saveAgentRequest *ns1__saveAgentRequest, _ns1__saveAgentResponse *ns1__saveAgentResponse) { return saveAgent(NULL, NULL, ns1__saveAgentRequest, ns1__saveAgentResponse); }
	virtual	int saveAgent(const char *endpoint, const char *soap_action, _ns1__saveAgentRequest *ns1__saveAgentRequest, _ns1__saveAgentResponse *ns1__saveAgentResponse);

	/// Web service operation 'saveSolution' (returns error code or SOAP_OK)
	virtual	int saveSolution(_ns1__saveSolutionRequest *ns1__saveSolutionRequest, std::string &ns1__saveSolutionResponse) { return saveSolution(NULL, NULL, ns1__saveSolutionRequest, ns1__saveSolutionResponse); }
	virtual	int saveSolution(const char *endpoint, const char *soap_action, _ns1__saveSolutionRequest *ns1__saveSolutionRequest, std::string &ns1__saveSolutionResponse);

	/// Web service operation 'market' (returns error code or SOAP_OK)
	virtual	int market(_ns1__marketRequest *ns1__marketRequest, _ns1__marketResponse *ns1__marketResponse) { return market(NULL, NULL, ns1__marketRequest, ns1__marketResponse); }
	virtual	int market(const char *endpoint, const char *soap_action, _ns1__marketRequest *ns1__marketRequest, _ns1__marketResponse *ns1__marketResponse);
};
#endif
