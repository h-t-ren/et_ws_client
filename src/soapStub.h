/* soapStub.h
   Generated by gSOAP 2.8.3 from et.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://www.ime.iiasa.ac.at/et/schemas"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__marketRequest
#define SOAP_TYPE__ns1__marketRequest (10)
/* ns1:marketRequest */
class SOAP_CMAC _ns1__marketRequest
{
public:
	LONG64 idMarket;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE__ns1__marketRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__marketRequest() { _ns1__marketRequest::soap_default(NULL); }
	virtual ~_ns1__marketRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns1__marketResponse
#define SOAP_TYPE__ns1__marketResponse (11)
/* ns1:marketResponse */
class SOAP_CMAC _ns1__marketResponse
{
public:
	class _ns1__market *market;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:market */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__ns1__marketResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__marketResponse() { _ns1__marketResponse::soap_default(NULL); }
	virtual ~_ns1__marketResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__market
#define SOAP_TYPE__ns1__market (12)
/* ns1:market */
class SOAP_CMAC _ns1__market
{
public:
	LONG64 idMarket;	/* required element of type xsd:long */
	std::string name;	/* required element of type xsd:string */
	int idSolver;	/* required element of type xsd:int */
	std::vector<class _ns1__party * >party;	/* required element of type ns1:party */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__ns1__market */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__market() { _ns1__market::soap_default(NULL); }
	virtual ~_ns1__market() { }
};
#endif

#ifndef SOAP_TYPE__ns1__party
#define SOAP_TYPE__ns1__party (13)
/* ns1:party */
class SOAP_CMAC _ns1__party
{
public:
	int idParty;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	double uncertainty;	/* required element of type xsd:double */
	double minEm;	/* required element of type xsd:double */
	double baseEm;	/* required element of type xsd:double */
	double targetEm;	/* required element of type xsd:double */
	class _ns1__func *func;	/* required element of type ns1:func */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__ns1__party */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__party() { _ns1__party::soap_default(NULL); }
	virtual ~_ns1__party() { }
};
#endif

#ifndef SOAP_TYPE__ns1__func
#define SOAP_TYPE__ns1__func (14)
/* ns1:func */
class SOAP_CMAC _ns1__func
{
public:
	std::string type;	/* required element of type xsd:string */
	std::vector<class _ns1__point * >point;	/* required element of type ns1:point */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__ns1__func */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__func() { _ns1__func::soap_default(NULL); }
	virtual ~_ns1__func() { }
};
#endif

#ifndef SOAP_TYPE__ns1__point
#define SOAP_TYPE__ns1__point (15)
/* ns1:point */
class SOAP_CMAC _ns1__point
{
public:
	double em;	/* required element of type xsd:double */
	double cost;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__ns1__point */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__point() { _ns1__point::soap_default(NULL); }
	virtual ~_ns1__point() { }
};
#endif

#ifndef SOAP_TYPE__ns1__saveAgentRequest
#define SOAP_TYPE__ns1__saveAgentRequest (16)
/* ns1:saveAgentRequest */
class SOAP_CMAC _ns1__saveAgentRequest
{
public:
	class _ns1__agent *agent;	/* required element of type ns1:agent */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__ns1__saveAgentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__saveAgentRequest() { _ns1__saveAgentRequest::soap_default(NULL); }
	virtual ~_ns1__saveAgentRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns1__saveAgentResponse
#define SOAP_TYPE__ns1__saveAgentResponse (17)
/* ns1:saveAgentResponse */
class SOAP_CMAC _ns1__saveAgentResponse
{
public:
	_ns1__agent *agent;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:agent */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE__ns1__saveAgentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__saveAgentResponse() { _ns1__saveAgentResponse::soap_default(NULL); }
	virtual ~_ns1__saveAgentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__agent
#define SOAP_TYPE__ns1__agent (18)
/* ns1:agent */
class SOAP_CMAC _ns1__agent
{
public:
	LONG64 idAgent;	/* required element of type xsd:long */
	LONG64 idMarket;	/* required element of type xsd:long */
	int idParty;	/* required element of type xsd:int */
	std::string type;	/* required element of type xsd:string */
	int riskFactor;	/* required element of type xsd:int */
	int priceFactor;	/* required element of type xsd:int */
	double currentEmission;	/* required element of type xsd:double */
	double bilans;	/* required element of type xsd:double */
	std::string stratery;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__ns1__agent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__agent() { _ns1__agent::soap_default(NULL); }
	virtual ~_ns1__agent() { }
};
#endif

#ifndef SOAP_TYPE__ns1__saveAuctionRequest
#define SOAP_TYPE__ns1__saveAuctionRequest (19)
/* ns1:saveAuctionRequest */
class SOAP_CMAC _ns1__saveAuctionRequest
{
public:
	class _ns1__auction *auction;	/* required element of type ns1:auction */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__ns1__saveAuctionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__saveAuctionRequest() { _ns1__saveAuctionRequest::soap_default(NULL); }
	virtual ~_ns1__saveAuctionRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns1__saveAuctionResponse
#define SOAP_TYPE__ns1__saveAuctionResponse (20)
/* ns1:saveAuctionResponse */
class SOAP_CMAC _ns1__saveAuctionResponse
{
public:
	_ns1__auction *auction;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:auction */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE__ns1__saveAuctionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__saveAuctionResponse() { _ns1__saveAuctionResponse::soap_default(NULL); }
	virtual ~_ns1__saveAuctionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__auction
#define SOAP_TYPE__ns1__auction (21)
/* ns1:auction */
class SOAP_CMAC _ns1__auction
{
public:
	LONG64 idAuction;	/* required element of type xsd:long */
	LONG64 idMarket;	/* required element of type xsd:long */
	LONG64 idAgentBuyer;	/* required element of type xsd:long */
	LONG64 idAgentSeller;	/* required element of type xsd:long */
	double winPrice;	/* required element of type xsd:double */
	double minPrice;	/* required element of type xsd:double */
	std::string startTime;	/* required element of type xsd:date */
	std::string endTime;	/* required element of type xsd:date */
	int units;	/* required element of type xsd:int */
	double minIncrease;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE__ns1__auction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__auction() { _ns1__auction::soap_default(NULL); }
	virtual ~_ns1__auction() { }
};
#endif

#ifndef SOAP_TYPE__ns1__saveBidRequest
#define SOAP_TYPE__ns1__saveBidRequest (22)
/* ns1:saveBidRequest */
class SOAP_CMAC _ns1__saveBidRequest
{
public:
	class _ns1__bid *bid;	/* required element of type ns1:bid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__ns1__saveBidRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__saveBidRequest() { _ns1__saveBidRequest::soap_default(NULL); }
	virtual ~_ns1__saveBidRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns1__saveBidResponse
#define SOAP_TYPE__ns1__saveBidResponse (23)
/* ns1:saveBidResponse */
class SOAP_CMAC _ns1__saveBidResponse
{
public:
	_ns1__bid *bid;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:bid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__ns1__saveBidResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__saveBidResponse() { _ns1__saveBidResponse::soap_default(NULL); }
	virtual ~_ns1__saveBidResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__bid
#define SOAP_TYPE__ns1__bid (24)
/* ns1:bid */
class SOAP_CMAC _ns1__bid
{
public:
	int idBid;	/* required element of type xsd:int */
	LONG64 idAuction;	/* required element of type xsd:long */
	LONG64 idAgent;	/* required element of type xsd:long */
	double price;	/* required element of type xsd:double */
	std::string time;	/* required element of type xsd:date */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__ns1__bid */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__bid() { _ns1__bid::soap_default(NULL); }
	virtual ~_ns1__bid() { }
};
#endif

#ifndef SOAP_TYPE__ns1__solution
#define SOAP_TYPE__ns1__solution (25)
/* ns1:solution */
class SOAP_CMAC _ns1__solution
{
public:
	int status;	/* required element of type xsd:int */
	int solverStatus;	/* required element of type xsd:int */
	class _ns1__marketSolution *marketSolution;	/* required element of type ns1:marketSolution */
	std::vector<class _ns1__partySolution * >partySolution;	/* required element of type ns1:partySolution */
	std::vector<class _ns1__msg * >msg;	/* required element of type ns1:msg */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__ns1__solution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__solution() { _ns1__solution::soap_default(NULL); }
	virtual ~_ns1__solution() { }
};
#endif

#ifndef SOAP_TYPE__ns1__partySolution
#define SOAP_TYPE__ns1__partySolution (26)
/* ns1:partySolution */
class SOAP_CMAC _ns1__partySolution
{
public:
	LONG64 idMarket;	/* required element of type xsd:long */
	int idParty;	/* required element of type xsd:int */
	double em;	/* required element of type xsd:double */
	double mrgEm;	/* required element of type xsd:double */
	double mrgBase;	/* required element of type xsd:double */
	double mrgTarget;	/* required element of type xsd:double */
	double costBase;	/* required element of type xsd:double */
	double costEm;	/* required element of type xsd:double */
	double costTarget;	/* required element of type xsd:double */
	double profit;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns1__partySolution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__partySolution() { _ns1__partySolution::soap_default(NULL); }
	virtual ~_ns1__partySolution() { }
};
#endif

#ifndef SOAP_TYPE__ns1__marketSolution
#define SOAP_TYPE__ns1__marketSolution (27)
/* ns1:marketSolution */
class SOAP_CMAC _ns1__marketSolution
{
public:
	LONG64 idMarket;	/* required element of type xsd:long */
	double mrgCost;	/* required element of type xsd:double */
	double profit;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__ns1__marketSolution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__marketSolution() { _ns1__marketSolution::soap_default(NULL); }
	virtual ~_ns1__marketSolution() { }
};
#endif

#ifndef SOAP_TYPE__ns1__msg
#define SOAP_TYPE__ns1__msg (28)
/* ns1:msg */
class SOAP_CMAC _ns1__msg
{
public:
	int msgType;	/* required element of type xsd:int */
	LONG64 idMarket;	/* required element of type xsd:long */
	int idParty;	/* required element of type xsd:int */
	std::string msg;	/* required element of type xsd:string */
	int seq;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE__ns1__msg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__msg() { _ns1__msg::soap_default(NULL); }
	virtual ~_ns1__msg() { }
};
#endif

#ifndef SOAP_TYPE__ns1__saveSolutionRequest
#define SOAP_TYPE__ns1__saveSolutionRequest (29)
/* ns1:saveSolutionRequest */
class SOAP_CMAC _ns1__saveSolutionRequest
{
public:
	_ns1__solution *solution;	/* required element of type ns1:solution */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE__ns1__saveSolutionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__saveSolutionRequest() { _ns1__saveSolutionRequest::soap_default(NULL); }
	virtual ~_ns1__saveSolutionRequest() { }
};
#endif

#ifndef SOAP_TYPE___ns1__saveAuction
#define SOAP_TYPE___ns1__saveAuction (51)
/* Operation wrapper: */
struct __ns1__saveAuction
{
public:
	_ns1__saveAuctionRequest *ns1__saveAuctionRequest;	/* optional element of type ns1:saveAuctionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__saveBid
#define SOAP_TYPE___ns1__saveBid (55)
/* Operation wrapper: */
struct __ns1__saveBid
{
public:
	_ns1__saveBidRequest *ns1__saveBidRequest;	/* optional element of type ns1:saveBidRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__saveAgent
#define SOAP_TYPE___ns1__saveAgent (59)
/* Operation wrapper: */
struct __ns1__saveAgent
{
public:
	_ns1__saveAgentRequest *ns1__saveAgentRequest;	/* optional element of type ns1:saveAgentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__saveSolutionResponse
#define SOAP_TYPE___ns1__saveSolutionResponse (63)
/* Operation wrapper: */
struct __ns1__saveSolutionResponse
{
public:
	std::string ns1__saveSolutionResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE___ns1__saveSolution
#define SOAP_TYPE___ns1__saveSolution (64)
/* Operation wrapper: */
struct __ns1__saveSolution
{
public:
	_ns1__saveSolutionRequest *ns1__saveSolutionRequest;	/* optional element of type ns1:saveSolutionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__market
#define SOAP_TYPE___ns1__market (68)
/* Operation wrapper: */
struct __ns1__market
{
public:
	_ns1__marketRequest *ns1__marketRequest;	/* optional element of type ns1:marketRequest */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (69)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (70)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (72)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (75)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (76)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__date
#define SOAP_TYPE_xsd__date (9)
typedef std::string xsd__date;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
